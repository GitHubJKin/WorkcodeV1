
/*** BeginHeader */
#ifndef rd_8019_cmes_baoying_lib
#define rd_8019_cmes_baoying_lib
/*** EndHeader */



/*** BeginHeader rd_cmes_baoying*/
int rd_cmes_baoying( char port );
/*** EndHeader */
/*******************************************************************************
##READ_DATA&&
##TIME=20101014123242,B02=123456.21,01=158.21,02=45.63,03=59.78,S01=14.23,S08=1750.47,S03=94.25,S05=78.23&&
*******************************************************************************/
int rd_cmes_baoying( char port )
{
   static int status;
   auto char portPosition;
   //auto char codePosition;
   auto char p;
   auto char *point;
   auto int i;
   auto char str[16];
   auto char buf[1024];
   static int len;

   costate
   {
      status = 0;

      memset(com_tbuf, 0x00, sizeof(com_tbuf));
      strcpy(com_tbuf, "##READ_DATA&&");
      com_tlen = strlen(com_tbuf);
      com_write(port);

      waitfor(DelaySec(1));
      memset(buf, 0x00, sizeof(buf));
      len = 0;
      while(1)
      {
         memset(com_rbuf, 0x00, sizeof(com_rbuf));
         com_read(port);
         if(com_rlen > 0)
         {
            if((len + com_rlen) >= 1024) break;
            memcpy(&buf[len], com_rbuf, com_rlen);
            len += com_rlen;
         }
         else break;
      }
      #ifdef DEBUG_PRINTF
         printf("com_rlen=%d \n", len);
         for (i = 0; i < len; i++)
         {
            printf("%c", buf[i]);
         }
         printf(" \n");
      #endif
      if((len > 0) && (strstr(buf, "##") != NULL) &&
         (strstr(buf, "&&") != NULL))
      {

         portPosition = port + 8;    //计算出是哪个通道的
         p = ai_param[portPosition].polIndex;  //取出污染物编码位置
         memset(str, 0x00, sizeof(str));
         if(p >= 100) sprintf(str, ",%s-Z=", PolCode[p]);
         else sprintf(str, ",%s=", PolCode[p]);
         point = strstr(buf, str);
         if(point != NULL)
         {
            point += strlen(str);
            com_f[0] = atof(point);
            #ifdef YISHEN
            if(p == 34)
            {
               com_f[0] *= 3600.0;
            }
            else if(p == 79)
            {
               com_f[0] /= 1000.0;
            }
            #endif
            old_com_f[0] = com_f[0];
         }

         for (i = 0; i < 20; i++)
         {
            if(ai_param_extend[i].port == port) //是同一个串口的
            {
               p = ai_param_extend[i].polIndex;
               if((p >= 0) && (p < BOCON_NO_OF_POL))
               {
                  memset(str, 0x00, sizeof(str));
                  if(p >= 100) sprintf(str, ",%s-Z=", PolCode[p-100]);
                  else sprintf(str, ",%s=", PolCode[p]);
                  point = strstr(buf, str);
                  if(point != NULL)
                  {
                     point += strlen(str);
                     com_f[i+1] = atof(point);
                     #ifdef YISHEN
                     if(p == 34)
                     {
                        com_f[i+1] *= 3600.0;
                     }
                     else if(p == 79)
                     {
                        com_f[i+1] /= 1000.0;
                     }
                     #endif
                     old_com_f[i+1] = com_f[i+1];
                  }
               }
            }
         }
         deviceStatus = 0;
         status = 1;
      }
      else
      {
         if(deviceStatus < 150)
         {
            for (i = 0; i < 20; i++)
            {
               com_f[i] = old_com_f[i];
               status = 1;
            }
            deviceStatus++;
         }
         else
         {
            status = 2;
         }
      }
      com_sec = read_rtc();
   }
   return status;
}





/*** BeginHeader */
#endif
/*** EndHeader */
























