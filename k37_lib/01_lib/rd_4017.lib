/*** BeginHeader */
#ifndef rd_4017_lib
#define rd_4017_lib
/*** EndHeader */


/*** BeginHeader rd_4017*/
int rd_4017( char port , char address, char vata_port);
/*** EndHeader */
int rd_4017( char port , char address, char vata_port)
{
	#define	EXTEND_PARAM_COUNT	(7)//串口扩展参数有多少个
	static int status;
   auto union uf f;//uf这在K36的驱动库里已定义
   static char ch, i;
   auto char j;
   auto CHARTOINTTY data;
   auto float maxSignalValue, minSignalValue;

   costate
   {
   	status = 0;

      pack_modbus_cmd(address, 0x03, 0x00, 8);
      com_write(port);

      waitfor(DelaySec(2));

      memset(com_rbuf, 0x00, sizeof(com_rbuf));
      com_read(port);
      if(com_rlen > 0 && com_rbuf[0] == address && com_rbuf[1] == 0x03)
      {
      	 maxSignalValue = 65535;
         minSignalValue = 0;
      	for(i = 0; i < 8; i++)
         {
         	if(i == 0)
            {
               f.ch[1] = com_rbuf[3];
	      		f.ch[0] = com_rbuf[4];
					com_f[0] = f.i[0];			//即时值
               if(com_f[0] < minSignalValue)
               {
               	com_f[0] = 0.0;
               }
               else if(com_f[0] > maxSignalValue)
               {
               	com_f[0] = ai_param[vata_port+8].alarm_H;
               }
               else
               {
         			com_f[0] = ((ai_param[vata_port+8].alarm_H - ai_param[vata_port+8].alarm_L) / (maxSignalValue-minSignalValue))
                           * (com_f[0] - minSignalValue) + ai_param[vata_port+8].alarm_L;
            	}

               printf("com_f[0] = %f\r\n", com_f[0]);
            }
            else
            {
         		for(ch = 0; ch < EXTEND_PARAM_COUNT; ch++)
      			{
  					if(ai_param_extend[ch].polIndex >= BOCON_NO_OF_POL) continue;//判断这通道有没有使用
     				if(ai_param_extend[ch].port != vata_port) continue;//判断是否是对应的串口
     				if(ai_param_extend[ch].position != i) continue;//位置是否对应

           			//j = i*4+3;
              		j = i*2+3;
           			f.ch[1] = com_rbuf[j];
      				f.ch[0] = com_rbuf[j+1];
					com_f[ai_param_extend[ch].position] = f.i[0];			//即时值

	              if(com_f[ai_param_extend[ch].position] < minSignalValue)
	              {
	              	com_f[ai_param_extend[ch].position] = 0;
	              }
	              else if(com_f[ai_param_extend[ch].position] > maxSignalValue)
	              {
	              	com_f[ai_param_extend[ch].position] = ai_param_extend[ch].alarm_H;
	              }
	              else
	              {
	     			com_f[ai_param_extend[ch].position] = ((ai_param_extend[ch].alarm_H - ai_param_extend[ch].alarm_L) / (maxSignalValue-minSignalValue))
	                                                      * (com_f[ai_param_extend[ch].position] - minSignalValue) + ai_param_extend[ch].alarm_L;
	              }
	              printf("com_f[%d] = %f\r\n", ai_param_extend[ch].position, com_f[ai_param_extend[ch].position]);
	           	  break;
      			}
            }
         }
         status = 1;
      }
      else
      {
      	status = 2;
      }
      com_sec = read_rtc();
   }
   return status;
}

/*** BeginHeader */
#endif
/*** EndHeader */

