
	

/*** BeginHeader */
#ifndef rd_8063_guobiao_2011_v1_lib
#define rd_8063_guobiao_2011_v1_lib
/*** EndHeader */




/*******************************************************
国标协议扩展                 --8063
固定接到串口3
*******************************************************/
/*** BeginHeader rd_guobiao_2011_v1*/
int rd_guobiao_2011_v1( char port );
/*** EndHeader */
int rd_guobiao_2011_v1( char port )
{
	static int status;
   auto char portPosition;
   //auto char codePosition;
   auto char p;
   auto char *point;
   auto int i;
   auto char str[16];
   auto char buf[1024];
   static int len;

   costate
   {
   	status = 0;

      waitfor(DelaySec(70));          //延时70s接收一次数据，防止共用串口接收错误
      memset(buf, 0x00, sizeof(buf));
      len = 0;
      while(1)
      {
      	memset(com_rbuf, 0x00, sizeof(com_rbuf));
      	com_read(port);
			if(com_rlen > 0)
         {
         	if((len + com_rlen) >= 1024) break;
         	memcpy(&buf[len], com_rbuf, com_rlen);
            len += com_rlen;
         }
         else break;
      }
      #ifdef DEBUG_PRINTF
         printf("com_rlen=%d \n", len);
         for (i = 0; i < len; i++)
         {
         	printf("%c", buf[i]);
         }
         printf(" \n");
      #endif
      if((len > 0) && (strstr(buf, "##") != NULL) &&
      	(strstr(buf, "CN=2011") != NULL))
      {

      	portPosition = port + 8;    //计算出是哪个通道的
      	p = ai_param[portPosition].polIndex;  //取出污染物编码位置
      	memset(str, 0x00, sizeof(str));
      	if(p >= 100)
         {
         	sprintf(str, ",%s-ZsRtd=", PolCode[p-100]);
         }
      	else
         {
         	sprintf(str, ";%s-Rtd=", PolCode[p]);
         }
      	point = strstr(buf, str);
      	if(point != NULL)
      	{
         	point += strlen(str);
         	com_f[0] = atof(point);
      	}
         else
         {
            memset(str, 0x00, sizeof(str));
      		if(p >= 100)
         	{
         		sprintf(str, " %s-ZsRtd=", PolCode[p-100]);
         	}
      		else
         	{
         		sprintf(str, " %s-Rtd=", PolCode[p]);
         	}
            point = strstr(buf, str);
      		if(point != NULL)
      		{
         		point += strlen(str);
         		com_f[0] = atof(point);
      		}
            else
            {
               memset(str, 0x00, sizeof(str));
      			if(p >= 100)
         		{
         			sprintf(str, ";%s-ZsRtd=", PolCode[p-100]);
         		}
      			else
         		{
         			sprintf(str, ",%s-Rtd=", PolCode[p]);
         		}
            	point = strstr(buf, str);
      			if(point != NULL)
      			{
         			point += strlen(str);
         			com_f[0] = atof(point);
      			}
            }
         }

         for (i = 0; i < 20; i++)
         {
         	if(ai_param_extend[i].port == port) //是同一个串口的
            {
         		p = ai_param_extend[i].polIndex;
            	if((p >= 0) && (p < BOCON_NO_OF_POL))
            	{
               	memset(str, 0x00, sizeof(str));
                  if(p >= 100) sprintf(str, ",%s-ZsRtd=", PolCode[p-100]);
      				else sprintf(str, ";%s-Rtd=", PolCode[p]);
                  point = strstr(buf, str);
      				if(point != NULL)
      				{
         				point += strlen(str);
         				com_f[ai_param_extend[i].position] = atof(point);
      				}
                  else
                  {
                     memset(str, 0x00, sizeof(str));
                  	if(p >= 100) sprintf(str, " %s-ZsRtd=", PolCode[p-100]);
      					else sprintf(str, " %s-Rtd=", PolCode[p]);
                  	point = strstr(buf, str);
      					if(point != NULL)
      					{
         					point += strlen(str);
         					com_f[ai_param_extend[i].position] = atof(point);
      					}
                     else
                     {
                        memset(str, 0x00, sizeof(str));
                  		if(p >= 100) sprintf(str, ";%s-ZsRtd=", PolCode[p-100]);
      						else sprintf(str, ",%s-Rtd=", PolCode[p]);
                  		point = strstr(buf, str);
      						if(point != NULL)
      						{
         						point += strlen(str);
         						com_f[ai_param_extend[i].position] = atof(point);
      						}
                     }
                  }
            	}
            }
         }
         status = 1;
      }
      else
      {
         	status = 2;
      }
      com_sec = read_rtc();
   }
   return status;
}




/*** BeginHeader */
#endif
/*** EndHeader */











