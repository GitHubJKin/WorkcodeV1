/*** BeginHeader */
#ifndef rd_1018_flux_boersi_v2_lib
#define rd_1018_flux_boersi_v2_lib
/*** EndHeader */

/***
博克斯流量计 v2
*/

/*** BeginHeader rd_flux_boersi_v2 */
int rd_flux_boersi_v2( char port );
/*** EndHeader */
int rd_flux_boersi_v2( char port )
{
   static int status;
   auto struct tm comTime;
   auto union uf f;//uf这在K36的驱动库里已定义

   costate
   {
      status = 0;
      //0x01,0x03,0x00,0x01,0x00,0x30,0x1e,0x14
      //pack_modbus_cmd(0x01, 0x03, 0x01, 0x30);
      com_tbuf[0] = 0x55;
      com_tbuf[1] = 0x03;
      com_tbuf[2] = 0x00;
      com_tbuf[3] = 0x1D;
      com_tbuf[4] = 0xE1;
      com_tbuf[5] = 0x21;
      com_tlen = 6;
      com_write(port);
      waitfor(DelayMs(1000));

      memset(com_rbuf, 0x00, sizeof(com_rbuf));
      com_read(port);
      if( (com_rlen >= 32)&&(com_rbuf[1] == 0x03) )
      {
         f.ch[0] = com_rbuf[3];
         f.ch[1] = com_rbuf[4];
         f.ch[2] = com_rbuf[5];
         f.ch[3] = com_rbuf[6];
         com_f[0] = com_rbuf[8] * 100000.0 + com_rbuf[9] * 10000.0 + com_rbuf[10] * 1000.0 +
                    com_rbuf[11] * 100.0 + com_rbuf[12] * 10.0 + com_rbuf[13] + com_rbuf[14] / 10.0;        //瞬时流量

         com_f[1] = com_rbuf[23] * 10000000.0 + com_rbuf[24] * 1000000.0 + com_rbuf[25] * 100000.0 +
                    com_rbuf[26] * 10000.0 + com_rbuf[27] * 1000.0 + com_rbuf[28] * 100.0 + com_rbuf[29] * 10.0 + com_rbuf[30];        //累计流量

         status = 1;
      }
      else
      {
         status = 2;
         com_f[0] = 0.0;
         com_f[1] = 0.0;
         com_sec = read_rtc();
      }
   }
   return status;
}





/*** BeginHeader */
#endif
/*** EndHeader */






