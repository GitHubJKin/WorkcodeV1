
/*** BeginHeader */
#ifndef rd_8005_xianxi_lib
#define rd_8005_xianxi_lib
/*** EndHeader */




/*******************************************************
山西省污染源监控系统数据采集和传输协议
查询瞬时值
*******************************************************/
/*** BeginHeader rd_xianxi */
int rd_xianxi( char port );
/*** EndHeader */
int rd_xianxi( char port )
{
   static int status;
   auto struct tm comTime;
   auto union uf f;//uf这在K36的驱动库里已定义

   costate
   {
      status = 0;
      pack_modbus_cmd(0x01, 0x03, 0x00, 0x02);
      com_write(port);
      waitfor(DelayMs(1000));

      memset(com_rbuf, 0x00, sizeof(com_rbuf));
      com_read(port);
      if( (com_rlen >= 9)&&(com_rbuf[0] == 0x01)&&(com_rbuf[1] == 0x03) )
      {
         f.ch[1] = com_rbuf[3];
         f.ch[0] = com_rbuf[4];
         f.ch[3] = com_rbuf[5];
         f.ch[2] = com_rbuf[6];
         com_f[0] = f.f;         //即时值

         pack_modbus_cmd(0x01, 0x03, 0x10, 0x02);
         com_write(port);
         waitfor(DelayMs(1000));

         memset(com_rbuf, 0x00, sizeof(com_rbuf));
         com_read(port);
         if( (com_rlen >= 9)&&(com_rbuf[0] == 0x01)&&(com_rbuf[1] == 0x03) )
         {
            f.ch[1] = com_rbuf[3];
            f.ch[0] = com_rbuf[4];
            f.ch[3] = com_rbuf[5];
            f.ch[2] = com_rbuf[6];
            com_f[1] = f.f;         //即时值
         }

         pack_modbus_cmd(0x01, 0x03, 0x1f4, 0x02);
         com_write(port);
         waitfor(DelayMs(1000));

         memset(com_rbuf, 0x00, sizeof(com_rbuf));
         com_read(port);
         if( (com_rlen >= 9)&&(com_rbuf[0] == 0x01)&&(com_rbuf[1] == 0x03) )
         {
            f.ch[1] = com_rbuf[3];
            f.ch[0] = com_rbuf[4];
            f.ch[3] = com_rbuf[5];
            f.ch[2] = com_rbuf[6];
            com_f[2] = f.f;         //即时值
         }

         status = 1;
      }
      else
      {
         status = 2;
         com_f[0] = 0.0;
         com_f[1] = 0.0;
         com_f[2] = 0.0;
         com_sec = read_rtc();
      }
   }
   return status;
}








/*** BeginHeader */
#endif
/*** EndHeader */














