
/*** BeginHeader */
#ifndef rd_20012_cod_andan_hach_lib
#define rd_20012_cod_andan_hach_lib
/*** EndHeader */


/*** BeginHeader rd_cod_andan_hach*/
int rd_cod_andan_hach( char port );
/*** EndHeader */
int rd_cod_andan_hach( char port )
{
   static int status;
   auto long d0, d1, d2, d3, d4;
   auto union uf f;//uf这在K36的驱动库里已定义

   costate
   {
      status = 0;

	  memset(com_tbuf,0x00,sizeof(com_tbuf));
      pack_modbus_cmd(0x01, 0x03, 0x00, 0x02);
      com_write(port);
      waitfor(DelayMs(2000));

      memset(com_rbuf, 0x00, sizeof(com_rbuf));
      com_read(port);
      if( (com_rlen >= 9)&&(com_rbuf[0] == 0x01)&&(com_rbuf[1] == 0x03) )
      {
         f.ch[1] = com_rbuf[3];
         f.ch[0] = com_rbuf[4];
         f.ch[3] = com_rbuf[5];
         f.ch[2] = com_rbuf[6];
         com_f[0] = f.f;         //即时值
      }
      else
      {
         com_f[0] = 0.0;         //即时值
      }

	  memset(com_tbuf,0,sizeof(com_tbuf));
      pack_modbus_cmd(0x02, 0x03, 0x00, 0x02);
      com_write(port);
      waitfor(DelayMs(2000));

      memset(com_rbuf, 0x00, sizeof(com_rbuf));
      com_read(port);
      if( (com_rlen >= 9)&&(com_rbuf[0] == 0x02)&&(com_rbuf[1] == 0x03) )
      {
         f.ch[1] = com_rbuf[3];
         f.ch[0] = com_rbuf[4];
         f.ch[3] = com_rbuf[5];
         f.ch[2] = com_rbuf[6];
         com_f[1] = f.f;         //即时值
      }
      else
      {
         com_f[1] = 0.0;
      }

	  memset(com_tbuf,0,sizeof(com_tbuf));
      pack_modbus_cmd(0x03, 0x03, 0x00, 0x02);
      com_write(port);
      waitfor(DelayMs(2000));

      memset(com_rbuf, 0x00, sizeof(com_rbuf));
      com_read(port);
      if( (com_rlen >= 9)&&(com_rbuf[0] == 0x03)&&(com_rbuf[1] == 0x03) )
      {
         f.ch[1] = com_rbuf[3];
         f.ch[0] = com_rbuf[4];
         f.ch[3] = com_rbuf[5];
         f.ch[2] = com_rbuf[6];
         com_f[2] = f.f;         //即时值
      }
      else
      {
         com_f[2] = 0.0;
      }
      com_sec = read_rtc();
      status = 1;
   }
   return status;
}




/*** BeginHeader */
#endif
/*** EndHeader */




















