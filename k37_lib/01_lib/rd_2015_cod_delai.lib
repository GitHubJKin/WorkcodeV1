
/*** BeginHeader */
#ifndef rd_2015_cod_delai_lib
#define rd_2015_cod_delai_lib
/*** EndHeader */



/*******************************************************
德莱紫外uvCOD
查询瞬时值
*******************************************************/
/*** BeginHeader rd_cod_delai */
int rd_cod_delai( char port );
/*** EndHeader */
int rd_cod_delai( char port )
{
   static int status;
   auto char i;
   auto struct tm current_time;
   auto unsigned long l_year;
   auto char l_str_year[4];
   auto int l_data;

   costate
   {
      status = 0;
//第一次操作
      com_tbuf[0] = 0xff;
      com_tbuf[1] = 0xff;
      com_tbuf[2] = 0xff;
      com_tbuf[3] = 0xcc;
      com_tbuf[4] = 0x08;
      com_tbuf[5] = 0x1c;

      memset(&current_time, 0x00, sizeof(&current_time));
      l_year = SEC_TIMER;
      mktm(&current_time, l_year);
      memset(l_str_year, 0x00, sizeof(l_str_year));
      printf("%04d \n", current_time.tm_year + 1900);
      sprintf(l_str_year, "%04d", current_time.tm_year + 1900);
      printf("%c%c%c%c \n", l_str_year[0],l_str_year[1],l_str_year[2],l_str_year[3]);
      l_str_year[0] = 0;
      l_str_year[1] = 0;
      com_tbuf[6] = (l_str_year[2] - 0x30) * 10 + (l_str_year[3] - 0x30);//atoi(l_str_year);//(char)(l_year & 0x00FF);
      com_tbuf[7] = current_time.tm_mon;
      com_tbuf[8] = current_time.tm_mday;
      com_tbuf[9] = current_time.tm_hour;
      com_tbuf[10] = current_time.tm_min;
      com_tbuf[11] = current_time.tm_sec;
      com_tbuf[12] = 0;
      for (i = 4; i < 12; i++)
      {
          com_tbuf[12] += com_tbuf[i];
      }
      com_tbuf[13] = 0xdd;
      com_tlen = 14;
      com_write(port);
      waitfor(DelayMs(1000));

      memset(com_rbuf, 0x00, sizeof(com_rbuf));
      com_read(port);
      if( (com_rlen >= 17)&&(com_rbuf[0] == 0xff)&&(com_rbuf[1] == 0xff) )
      {
//数据解析
         l_data = com_rbuf[8];
         l_data = l_data << 8;
         l_data = l_data | com_rbuf[9];
         com_f[0] = (float)l_data;//即时值
      }
      else
      {
         status = 2;
         com_f[0] = 0.0;
      }
       com_sec = read_rtc();
      if(status == 0)status = 1;
   }
   return status;
}



/*** BeginHeader */
#endif
/*** EndHeader */

























