
/*** BeginHeader */
#ifndef rd_6007_andan_dwg_lib
#define rd_6007_andan_dwg_lib
/*** EndHeader */


/*** BeginHeader rd_andan_dwg */
int rd_andan_dwg( char port );                        //6007
/*** EndHeader */
int rd_andan_dwg( char port )
{ //3A 30 31 30 33 30 30 31 36 30 30 30 39 44 44 0D 0A
   static int status;
   auto unsigned int comcrc;
   auto char data[3];
   //auto float value;
   auto unsigned dat;
   auto float i, k;
   auto float changbit;

   auto char s;   //符号位
   auto char p, p1;  //阶码
   auto unsigned long m, value;  //尾数
   auto union uf result;
   costate
   {
      status = 0;

      com_tbuf[0] = 0x3A;
      com_tbuf[1] = 0x30;
      com_tbuf[2] = 0x31;
      com_tbuf[3] = 0x30;
      com_tbuf[4] = 0x33;
      com_tbuf[5] = 0x30;
      com_tbuf[6] = 0x30;
      com_tbuf[7] = 0x31;
      com_tbuf[8] = 0x36;
      com_tbuf[9] = 0x30;
      com_tbuf[10] = 0x30;
      com_tbuf[11] = 0x30;
      com_tbuf[12] = 0x39;
      com_tbuf[13] = 0x44;
      com_tbuf[14] = 0x44;
      com_tbuf[15] = 0x0D;
      com_tbuf[16] = 0x0A;
      com_tlen = 17;
      com_write(port);
      waitfor(DelayMs(1000));

      memset(com_rbuf, 0x00, sizeof(com_rbuf));
      com_read(port);
      if((com_rlen >= 0) && (com_rbuf[0] == 0x3A) && (com_rbuf[com_rlen-2] == 0x0D)
          && (com_rbuf[com_rlen-1] == 0x0A))
      {
         data[0] = HexCharToDec(com_rbuf[21]);
         data[0] <<= 4;
         data[0] |= HexCharToDec(com_rbuf[22]);

         data[1] = HexCharToDec(com_rbuf[23]);
         data[1] <<= 4;
         data[1] |= HexCharToDec(com_rbuf[24]);

         data[2] = HexCharToDec(com_rbuf[25]);
         data[2] <<= 4;
         data[2] |= HexCharToDec(com_rbuf[26]);

         /*if(data[0] & 0x80)  //负数
         {
            //s = 0x01;
            value = 0x80000000;
         }
         else  //正数
         {
            value = 0x00000000;
         }

         p = data[0] & 0x7f;
         if(p & 0x40) //负数
         {
            p1 &= 0x00;
            p1 |= 0x80;  //将最高位置1
            p1 = p1 | p;
         }
         else //正数
         {
            p1 = p;
         }

         m = data[1];
         m <<= 15;
         m = m | (data[2] << 7);

         value = value | (p << 23);
         value = (value | m);
         result.l = value;
         com_f[0] = result.f;

         status = 1;   */

         dat = data[1];
         dat <<= 8;
         dat |= data[2];

         k = 0;
         for (i = -1; i > -17; i--)
         {
            if(dat & 0x8000)
            {
               k += pow(2, i);
            }
            dat <<= 1;
         }

         if(data[0] & 0x40)
         {
            changbit = ((~data[0]) & 0x3F) + 1;
            k /= pow(2, changbit);
         }
         else
         {
            changbit = data[0] & 0x3F;
            k *= pow(2, changbit);
         }
         com_f[0] = k;
         status = 1;
      }
      if(status == 0)
      {
         status = 2;
         com_f[0] = 0.0;
      }
      com_sec = read_rtc();      //采样时间
   }
   return status;
}



/*** BeginHeader */
#endif
/*** EndHeader */


