
/*** BeginHeader */
#ifndef rd_8020_guobiao_2011_8020_lib
#define rd_8020_guobiao_2011_8020_lib
/*** EndHeader */



/*** BeginHeader rd_guobiao_2011_8020 */
int rd_guobiao_2011_8020( char port );
/*** EndHeader */
int rd_guobiao_2011_8020( char port )
{
	static int status;
   auto char portPosition;
   //auto char codePosition;
   auto char p;
   auto char *point;
   auto int i;
   auto char str[16];
   auto char buf[1024];
   static int len;

   costate
   {
   	status = 0;

      waitfor(DelaySec(1));
      memset(buf, 0x00, sizeof(buf));
      len = 0;
      while(1)
      {
      	memset(com_rbuf, 0x00, sizeof(com_rbuf));
      	com_read(port);
			if(com_rlen > 0)
         {
         	if((len + com_rlen) >= 1024) break;
         	memcpy(&buf[len], com_rbuf, com_rlen);
            len += com_rlen;
         }
         else break;
      }
      #ifdef DEBUG_PRINTF
         printf("com_rlen=%d \n", len);
         for (i = 0; i < len; i++)
         {
         	printf("%c", buf[i]);
         }
         printf(" \n");
      #endif
      if((len > 0) && (strstr(buf, "##") != NULL) &&
      	(strstr(buf, "CN=2011") != NULL))
      {

      	portPosition = port + 8;    //计算出是哪个通道的
      	p = ai_param[portPosition].polIndex;  //取出污染物编码位置
      	memset(str, 0x00, sizeof(str));
      	if(p >= 100)
         {
         	sprintf(str, ",%s-ZsRtd=", PolCode[p-100]);
         }
      	else
         {
         	sprintf(str, ";%s-Rtd=", PolCode[p]);
         }
      	point = strstr(buf, str);
      	if(point != NULL)
      	{
         	point += strlen(str);
         	com_f[0] = atof(point);
         	//S08烟气压力的换算处理,并转换单位 Pa->kPa
         	if(p == 79)
         	{
         		//com_f[0] = (com_f[0]*1000000) - ai_param[12].alarm_H;
         		com_f[0] = com_f[0] / 1000.0;
				}
				//对B02废气流量的换算处理，转换单位m3/h -> m3/s.
				//else
            if(p == 34)
				{
					com_f[0] = com_f[0] /3600.0;
				}
            old_com_f[0] = com_f[0];
      	}
         else
         {
            memset(str, 0x00, sizeof(str));
      		if(p >= 100)
         	{
         		sprintf(str, " %s-ZsRtd=", PolCode[p-100]);
         	}
      		else
         	{
         		sprintf(str, " %s-Rtd=", PolCode[p]);
         	}
            point = strstr(buf, str);
      		if(point != NULL)
      		{
         		point += strlen(str);
         		com_f[0] = atof(point);
         		//S08烟气压力的换算处理,并转换单位 Pa->kPa
         		if(p == 79)
         		{
         			//com_f[0] = (com_f[0]*1000000) - ai_param[12].alarm_H;
         			com_f[0] = com_f[0] / 1000.0;
					}
            	//else
               if(p == 34)
					{
						com_f[0] = com_f[0] /3600.0;
					}
            	old_com_f[0] = com_f[0];
      		}
            else
            {
               memset(str, 0x00, sizeof(str));
      			if(p >= 100)
         		{
         			sprintf(str, ";%s-ZsRtd=", PolCode[p-100]);
         		}
      			else
         		{
         			sprintf(str, ",%s-Rtd=", PolCode[p]);
         		}
            	point = strstr(buf, str);
      			if(point != NULL)
      			{
         			point += strlen(str);
         			com_f[0] = atof(point);
         			//S08烟气压力的换算处理,并转换单位 Pa->kPa
         			if(p == 79)
         			{
         				//com_f[0] = (com_f[0]*1000000) - ai_param[12].alarm_H;
         				com_f[0] = com_f[0] / 1000.0;
					}
					//对B02废气流量的换算处理,并转换单位 m3/h -> m3/s
					//else
               if(p == 34)
					{
						com_f[0] = com_f[0] / 3600.0;
					}
            		old_com_f[0] = com_f[0];
      			}
            }
         }

         for (i = 0; i < 20; i++)
         {
         	if(ai_param_extend[i].port == port) //是同一个串口的
            {
         		p = ai_param_extend[i].polIndex;
            	if((p >= 0) && (p < BOCON_NO_OF_POL))
            	{
               	memset(str, 0x00, sizeof(str));
                  if(p >= 100) sprintf(str, ",%s-ZsRtd=", PolCode[p-100]);
      				else sprintf(str, ";%s-Rtd=", PolCode[p]);
                  point = strstr(buf, str);
      				if(point != NULL)
      				{
         				point += strlen(str);
         				com_f[ai_param_extend[i].position] = atof(point);
         				//S08烟气压力的换算处理,并转换单位 Pa->kPa
         				if(p == 79)
         				{
         					//com_f[ai_param_extend[i].position] = (com_f[ai_param_extend[i].position]*1000000) - ai_param[12].alarm_H;
								com_f[ai_param_extend[i].position] = com_f[ai_param_extend[i].position] / 1000.0;
							}
							//对B02废气流量的换算处理,并转换单位 m3/h -> m3/s.
							//else
                     if(p == 34)
							{
								com_f[ai_param_extend[i].position] = com_f[ai_param_extend[i].position] /3600.0;
							}
                     	old_com_f[ai_param_extend[i].position] = com_f[ai_param_extend[i].position];
      				}
                  else
                  {
                     memset(str, 0x00, sizeof(str));
                  	if(p >= 100) sprintf(str, " %s-ZsRtd=", PolCode[p-100]);
      					else sprintf(str, " %s-Rtd=", PolCode[p]);
                  	point = strstr(buf, str);
      					if(point != NULL)
      					{
         					point += strlen(str);
         					com_f[ai_param_extend[i].position] = atof(point);
         					//S08烟气压力的换算处理,并转换单位 Pa->kPa
         					if(p == 79)
         					{
         						//com_f[ai_param_extend[i].position] = (com_f[ai_param_extend[i].position]*1000000) - ai_param[12].alarm_H;
								com_f[ai_param_extend[i].position] = com_f[ai_param_extend[i].position] / 1000.0;
							}
							//对B02废气流量的换算处理,并转换单位 m3/h -> m3/s.
							//else
                     if(p == 34)
							{
								com_f[ai_param_extend[i].position] = com_f[ai_param_extend[i].position] / 3600.0;
							}
                     		old_com_f[ai_param_extend[i].position] = com_f[ai_param_extend[i].position];
      					}
                     else
                     {
                        memset(str, 0x00, sizeof(str));
                  		if(p >= 100) sprintf(str, ";%s-ZsRtd=", PolCode[p-100]);
      						else sprintf(str, ",%s-Rtd=", PolCode[p]);
                  		point = strstr(buf, str);
      						if(point != NULL)
      						{
         						point += strlen(str);
         						com_f[ai_param_extend[i].position] = atof(point);
         						//S08烟气压力的换算处理,并转换单位 Pa->kPa
         						if(p == 79)
         						{
         							//com_f[ai_param_extend[i].position] = (com_f[ai_param_extend[i].position]*1000000) - ai_param[12].alarm_H;
									com_f[ai_param_extend[i].position] = com_f[ai_param_extend[i].position] / 1000.0;
								}
								//对B02废气流量的换算处理,并转换单位 m3/h -> m3/s.
								//else
                        if(p == 34)
								{
									com_f[ai_param_extend[i].position] = com_f[ai_param_extend[i].position] /3600.0;
								}
                     			old_com_f[ai_param_extend[i].position] = com_f[ai_param_extend[i].position];
      						}
                     }
                  }
            	}
            }
         }
         deviceStatus = 0;
         status = 1;
      }
      else
      {
         if(deviceStatus < 150)
         {
            for (i = 0; i < 20; i++)
            {
            	com_f[i] = old_com_f[i];
               status = 1;
            }
            deviceStatus++;
         }
         else
         {
         	status = 2;
         }
      }
      com_sec = read_rtc();
   }
   return status;
}





/*** BeginHeader */
#endif
/*** EndHeader */

























