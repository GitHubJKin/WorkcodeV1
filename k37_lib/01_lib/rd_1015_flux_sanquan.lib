/*** BeginHeader */
#ifndef rd_1015_flux_sanquan_lib
#define rd_1015_flux_sanquan_lib
/*** EndHeader */

/*** BeginHeader rd_flux_sanquan*/
int rd_flux_sanquan( char port );
/*** EndHeader */
int rd_flux_sanquan( char port )
{
   static int status;
   auto struct tm comTime;
   auto union uf f;//uf这在K36的驱动库里已定义

   costate
   {
      status = 0;
      pack_modbus_cmd(0x01, 0x03, 0x06, 0x06);
      com_write(port);
      waitfor(DelayMs(3000));

      memset(com_rbuf, 0x00, sizeof(com_rbuf));
      com_read(port);
      if( (com_rlen >= 9)&&(com_rbuf[0] == 0x01)&&(com_rbuf[1] == 0x03) )
      {
         f.ch[1] = com_rbuf[3];
         f.ch[0] = com_rbuf[4];
         f.ch[3] = com_rbuf[5];
         f.ch[2] = com_rbuf[6];
         com_f[0] = f.f;         //瞬时值

         f.ch[1] = com_rbuf[7];
         f.ch[0] = com_rbuf[8];
         f.ch[3] = com_rbuf[9];
         f.ch[2] = com_rbuf[10];
         com_f[1] = f.f;
         f.ch[1] = com_rbuf[11];
         f.ch[0] = com_rbuf[12];
         f.ch[3] = com_rbuf[13];
         f.ch[2] = com_rbuf[14];
         com_f[1] = com_f[1] * 100.0 + f.f;

         status = 1;
      }
      else
      {
         status = 2;
         com_f[0] = 0.0;
         com_f[1] = 0.0;
         com_sec = read_rtc();
      }
   }
   return status;
}

//西安三全流量计，地址1,功能码3
/*** BeginHeader rd_flux_1015sanquan*/
int rd_flux_1015sanquan(void);
/*** EndHeader */
int rd_flux_1015sanquan(void)
{
	auto int status;

   status = 0;
   com_f[0] = getModbusRtuFloat1032(6, 6, com_rbuf);				//瞬时流量
   com_f[1] = getModbusRtuFloat1032(6, 8, com_rbuf);
   com_f[1] = com_f[1]*100+getModbusRtuFloat1032(6, 10, com_rbuf);	//累计流量
   status = 1;

   return status;
}
/*** BeginHeader */
#endif
/*** EndHeader */

