/*** Beginheader */
#ifndef __BOCON_POL_TABLE_LIB
#define __BOCON_POL_TABLE_LIB
/*** Endheader */

/*** Beginheader */

#use "BOCON_POL_TABLE_CUSTOM_5socket.LIB"
#use "bocon_newCodeName_5socket.lib"

//以下是废水参数的显示接口函数
#define glDispWater_00(x, y) {glXPutBitmap (x, y, 62, 16, realFlux_bmp);}
#define glDispWater_01(x, y) {glXPutBitmap (x, y, 31, 16, BoconPH_bmp);}
#define glDispWater_02(x, y) {glXPutBitmap (x, y, 30, 16, BoconColor_bmp);}
#define glDispWater_03(x, y) {glXPutBitmap (x, y, 45, 16, BoconSubstance_bmp);}
#define glDispWater_04(x, y) {glXPutBitmap (x, y, 79, 16, BoconBOD_bmp);}
#define glDispWater_05(x, y) {glXPutBitmap (x, y, 79, 16, BoconCOD_bmp);}
#define glDispWater_06(x, y) {glXPutBitmap (x, y, 15, 16, BoconTan_bmp);}
#define glDispWater_07(x, y) {glXPutBitmap (x, y, 30, 16, zonggong_bmp);}
#define glDispWater_08(x, y) {glXPutBitmap (x, y, 47, 16, wanjigong_bmp);}
#define glDispWater_09(x, y) {glXPutBitmap (x, y, 15, 16, BoconGee_bmp);}
#define glDispWater_10(x, y) {glXPutBitmap (x, y, 30, 15, zongge_bmp);}
#define glDispWater_11(x, y) {glXPutBitmap (x, y, 47, 16, boconLuJaGe_bmp);}
#define glDispWater_12(x, y) {glXPutBitmap (x, y, 46, 16, shangjiage_bmp);}
#define glDispWater_13(x, y) {glXPutBitmap (x, y, 14, 16, BoconShen_bmp);}
#define glDispWater_14(x, y) {glXPutBitmap (x, y, 15, 15, BoconQian_bmp);}
#define glDispWater_15(x, y) {glXPutBitmap (x, y, 30, 16, boconZongNie_bmp);}
#define glDispWater_16(x, y) {glXPutBitmap (x, y, 30, 16, boconZongTong_bmp);}
#define glDispWater_17(x, y) {glXPutBitmap (x, y, 30, 16, boconZongXin_bmp);}
#define glDispWater_18(x, y) {glXPutBitmap (x, y, 15, 15, BoconMeng_bmp);}
#define glDispWater_19(x, y) {glXPutBitmap (x, y, 15, 15, BoconTie_bmp);}
#define glDispWater_20(x, y) {glXPutBitmap (x, y, 15, 15, BoconYin_bmp);}
#define glDispWater_21(x, y) {glXPutBitmap (x, y, 15, 15, BoconPi_bmp);}
#define glDispWater_22(x, y) {glXPutBitmap (x, y, 15, 14, BoconXi_bmp);}
#define glDispWater_23(x, y) {glXPutBitmap (x, y, 15, 16, BoconXii_bmp);}
#define glDispWater_24(x, y) {glXPutBitmap (x, y, 15, 15, BoconPeng_bmp);}
#if(SUZHOUWEISHUI == 1 || JIANGXIBOYUAN == 1)
#define glDispWater_25(x, y) {glXPutBitmap (x, y, 16*2, 16, yushui_BMP);}{glXPutBitmap (x+16*2, y, 16*2, 16, liuliang_BMP);}
#define glDispWater_26(x, y) {glXPutBitmap (x, y, 16*2, 16, yushui_BMP);}{glXPutBitmap (x+16*2, y, 31, 16, BoconAnDn_bmp);}
#define glDispWater_27(x, y) {glXPutBitmap (x, y, 16*2, 16, yushui_BMP);}{glPrintf(x+16*2, y, &fi12x16, "PH");}
#define glDispWater_28(x, y) {glXPutBitmap (x, y, 16*2, 16, yushui_BMP);}{glPrintf(x+16*2, y, &fi12x16, "COD");}
#else
#define glDispWater_25(x, y) {glXPutBitmap (x, y, 14, 15, BoconMu_bmp);}
#define glDispWater_26(x, y) {glXPutBitmap (x, y, 15, 16, BoconBei_bmp);}
#define glDispWater_27(x, y) {glXPutBitmap (x, y, 15, 15, BoconGu_bmp);}
#define glDispWater_28(x, y) {glXPutBitmap (x, y, 15, 15, BoconTuo_bmp);}
#endif
#define glDispWater_29(x, y) {glXPutBitmap (x, y, 31, 16, BoconAnDn_bmp);}
#define glDispWater_30(x, y) {glXPutBitmap (x, y, 47, 16, youjidan_bmp);}
#define glDispWater_31(x, y) {glXPutBitmap (x, y, 30, 16, zongdan_bmp);}
#define glDispWater_32(x, y) {glXPutBitmap (x, y, 47, 16, BoconOil_bmp);}
#define glDispWater_33(x, y) {glXPutBitmap (x, y, 30, 15, boconZongLin_bmp);}

//以下是废气参数的显示接口函数
#if(NANJINGHONGKAI == 1)
#define glDispSoot_00(x, y) {glPrintf(x, y, &fi12x16, "TVOC");}{glXPutBitmap (x+16*3, y, 16*2, 16, liuliang_BMP);}
#else
#if (FEIQI_BIAOKUANG_BMP == 1)
#define glDispSoot_00(x, y) {glXPutBitmap (x, y, 31, 16, bocon_B02_bmp);}
#else
#define glDispSoot_00(x, y) {glXPutBitmap (x, y, 16*4, 16, BiaoKuangLiuLiang_BMP);}
#endif
#endif

#if (YANCHEN_KELIWU_BMP == 1)
#define glDispSoot_01(x, y) {glXPutBitmap (x, y, 31, 16, bocon_01_bmp);}
#else
#define glDispSoot_01(x, y) {glXPutBitmap (x, y, 16*3, 16, KeLiWu_BMP);}
#endif

#define glDispSoot_02(x, y) {glXPutBitmap (x, y, 62, 16, bocon_02_bmp);}
#define glDispSoot_03(x, y) {glXPutBitmap (x, y, 62, 16, bocon_03_bmp);}
#define glDispSoot_04(x, y) {glXPutBitmap (x, y, 62, 16, bocon_04_bmp);}
#define glDispSoot_05(x, y) {glXPutBitmap (x, y, 47, 16, bocon_05_bmp);}
#define glDispSoot_06(x, y) {glXPutBitmap (x, y, 46, 16, bocon_06_bmp);}
#define glDispSoot_07(x, y) {glXPutBitmap (x, y, 46, 16, bocon_07_bmp);}
#define glDispSoot_08(x, y) {glXPutBitmap (x, y, 47, 16, bocon_08_bmp);}
#define glDispSoot_09(x, y) {glXPutBitmap (x, y, 47, 16, bocon_09_bmp);}
#define glDispSoot_10(x, y) {glXPutBitmap (x, y, 15, 16, bocon_10_bmp);}
#define glDispSoot_11(x, y) {glXPutBitmap (x, y, 31, 16, bocon_11_bmp);}
#define glDispSoot_12(x, y) {glXPutBitmap (x, y, 62, 16, bocon_12_bmp);}
#define glDispSoot_13(x, y) {glXPutBitmap (x, y, 31, 16, bocon_13_bmp);}
#define glDispSoot_14(x, y) {glXPutBitmap (x, y, 47, 16, bocon_14_bmp);}
#define glDispSoot_15(x, y) {glXPutBitmap (x, y, 47, 16, bocon_15_bmp);}
#define glDispSoot_16(x, y) {glXPutBitmap (x, y, 46, 16, bocon_16_bmp);}
#define glDispSoot_17(x, y) {glXPutBitmap (x, y, 30, 16, bocon_17_bmp);}
#define glDispSoot_18(x, y) {glXPutBitmap (x, y, 46, 16, bocon_18_bmp);}
#define glDispSoot_19(x, y) {glXPutBitmap (x, y, 30, 16, bocon_19_bmp);}
#define glDispSoot_20(x, y) {glXPutBitmap (x, y, 47, 16, bocon_20_bmp);}
#define glDispSoot_21(x, y) {glXPutBitmap (x, y, 47, 16, bocon_21_bmp);}
#define glDispSoot_22(x, y) {glXPutBitmap (x, y, 63, 16, bocon_22_bmp);}
#define glDispSoot_23(x, y) {glXPutBitmap (x, y, 47, 16, bocon_23_bmp);}
#define glDispSoot_24(x, y) {glXPutBitmap (x, y, 30, 16, bocon_24_bmp);}
#define glDispSoot_25(x, y) {glXPutBitmap (x, y, 78, 16, bocon_25_bmp);}
#define glDispSoot_26(x, y) {glXPutBitmap (x, y, 31, 15, bocon_26_bmp);}
#define glDispSoot_27(x, y) {glXPutBitmap (x, y, 31, 16, bocon_27_bmp);}
#define glDispSoot_28(x, y) {glXPutBitmap (x, y, 30, 16, bocon_28_bmp);}
#define glDispSoot_29(x, y) {glXPutBitmap (x, y, 47, 16, bocon_29_bmp);}
#define glDispSoot_30(x, y) {glXPutBitmap (x, y, 62, 16, bocon_30_bmp);}
#define glDispSoot_31(x, y) glDispWater_07(x, y)
#define glDispSoot_32(x, y) glDispWater_14(x, y)
#define glDispSoot_33(x, y) glDispWater_09(x, y)
#define glDispSoot_34(x, y) glDispWater_23(x, y)
#define glDispSoot_35(x, y) glDispWater_15(x, y)
#define glDispSoot_36(x, y) glDispWater_21(x, y)
#if(CHANGSHAHUASHIJIE == 1)
#define glDispSoot_37(x, y) {glXPutBitmap (x, y, 16*4, 16, yuanSO2_BMP);}
#else
#define glDispSoot_37(x, y) {glXPutBitmap (x, y, 79, 16, bocon_37_bmp);}
#endif
#define glDispSoot_38(x, y) {glXPutBitmap (x, y, 46, 16, bocon_S01_bmp);}
#define glDispSoot_39(x, y) {glXPutBitmap (x, y, 63, 16, bocon_S02_bmp);}
#define glDispSoot_40(x, y) {glXPutBitmap (x, y, 63, 16, bocon_S03_bmp);}
#define glDispSoot_41(x, y) {glXPutBitmap (x, y, 63, 16, bocon_S04_bmp);}
#define glDispSoot_42(x, y) {glXPutBitmap (x, y, 63, 16, bocon_S05_bmp);}
#if(XICHANGSANFENG == 1)	//西昌三峰
#define glDispSoot_43(x, y) {glXPutBitmap (x, y, 16*2, 16, zhuangtai_BMP);}
#else
#define glDispSoot_43(x, y) {glXPutBitmap (x, y, 63, 16, bocon_S06_bmp);}
#endif
#define glDispSoot_44(x, y) {glXPutBitmap (x, y, 79, 16, bocon_S07_bmp);}
#define glDispSoot_45(x, y) {glXPutBitmap (x, y, 62, 16, bocon_S08_bmp);}

//以下是折算值的显示接口函数
#define glDispZhe(x, y)		{glXPutBitmap (x, y, 15, 15, bocon_zhe_bmp);}

typedef struct
{
    char posAI;                         //污染物的索引位置
    unsigned char posTable;          //污染物编码
}CODEPOSITION;
CODEPOSITION CodePosition[ALLADCHANNELS];   //污染物的位置，AI1-8，COM1-7
char CodeNumber;                        //污染物的个数
/*** Endheader */

//根据折算值在缓冲数组里的位置，查找对应的参数在数组里的位置
/*** BeginHeader query_src_index */
char query_src_index(char pos);
/*** EndHeader */
nodebug char query_src_index(char pos)
{
    auto char c;
    auto unsigned char index;

    if (pos < 0x10) index = ai_param[pos].polIndex;               //取折算值索引
    else index = ai_param_extend[pos - 0x10].polIndex;
    if (index < (BOCON_NO_OF_POL / 2)) return ALLADCHANNELS;  //不是折算值
    index -= (BOCON_NO_OF_POL / 2);                                  //映射到实测值

    for (c = 0; c < 0x10; c++)
    {
        if (ai_param[c].polIndex == index)	return c;
    }
    for (c = 0x10; c < ALLADCHANNELS; c++)
    {
        if (ai_param_extend[c - 0x10].polIndex == index)	return c;
    }
    return ALLADCHANNELS;
}

/*** BeginHeader polCodeInit */
void polCodeInit(void);
/*** EndHeader */
nodebug void polCodeInit(void) //改变通道的设置后,除了其自身设置重置外,还会调用本函数.
{
    auto char i, c;
//K37的16个物理参数的编码和在编码表里的序号，
//没用的通道编码是“FFF”，对应的polIndex为BOCON_NO_OF_POL，表示不用
//折算值的编码是在原编码后加'Z'，需要处理

    check_user_config(); //首先检查用户配置是否正确，不对的折算值设定自动清除
//更新缓冲区里各通道的德编码
    for (i = 0; i < 0x10; i++)
    {
        Savech[i].polIndex = ai_param[i].polIndex;
        Savech[i].zs_index = ALLADCHANNELS;
    }
//K37的20个扩展参数的编码和在编码表里的位置
    for (i = 0x10; i < ALLADCHANNELS; i++)
    {
        Savech[i].polIndex = ai_param_extend[i - 0x10].polIndex;
        Savech[i].zs_index = ALLADCHANNELS;
    }

//检查是否设置了污水流速B01，或者烟气流速S02，二者必有其一，否则不能正常统计总量
//当同时设置了二者时，优先查找污水
    runMode = 0;
    ch_flux = ALLADCHANNELS; //无效
    for (i = 0; i < ALLADCHANNELS; i++) //搜索污水流速
    {
        if (Savech[i].polIndex == 0)
        {
            runMode = 1;
            ch_flux = i;
            break;
        }
    }
    if (runMode == 0)                 //未找到，则搜索烟气流速
    {
        for (i = 0; i < ALLADCHANNELS; i++)
        {
            if (Savech[i].polIndex == 34)  //优先搜索B02
            {
                runMode = 2;
                ch_flux = i;
                break;
            }
        }
        if (runMode == 0)
        {
            for (i = 0; i < ALLADCHANNELS; i++)
            {
                if (Savech[i].polIndex == 73)  //如果没有设置B02，则搜索S02
                {
                    runMode = 2;
                    ch_flux = i;
                    break;
                }
            }
        }
    }
    printf("Mode %d, %d\n", runMode, ch_flux);

//计算折算值在数组里的位置，以及对应的参数的位置
    for (i = 0; i < 0x10; i++)
    {
        if ((ai_param[i].polIndex >= (BOCON_NO_OF_POL / 2)) && (ai_param[i].polIndex < BOCON_NO_OF_POL))
        {
            c = query_src_index(i);        //是折算值，查对应的实测值的位置
            if (c < ALLADCHANNELS)
            {
                Savech[c].zs_index = i; //如有效，则保存实测值通道的折算值索引
            }
        }
    }
    for (i = 0x10; i < ALLADCHANNELS; i++)
    {
        if ((ai_param_extend[i - 0x10].polIndex > (BOCON_NO_OF_POL / 2)) && (ai_param_extend[i - 0x10].polIndex < BOCON_NO_OF_POL))
        {
            c = query_src_index(i);        //是折算值，查对应的实测值的位置
            if (c < ALLADCHANNELS)
            {
                Savech[c].zs_index = i; //如有效，则保存实测值通道的折算值索引
            }
        }
    }

    calcCodePosition();  //更新使用的通道编号表
}

/*******************************************************************************
根据污染物编码字符串查找污染物在编码表里的位置
0-99为物理参数，100-199为折算值的虚拟参数
返回0-199表示编码正确，找到
返回BOCON_NO_OF_POL表示编码错误，没有找到
*******************************************************************************/
/*** Beginheader queryIndexByPolcode */
char queryIndexByPolcode(char *code);
/*** endheader */
nodebug char queryIndexByPolcode(char *code)
{
    auto unsigned char c;
    auto char t[8];
    for (c = 0; c < (BOCON_NO_OF_POL / 2); c++)   //搜索实际参数
    {
        if (strcmp(code, PolCode[c]) == 0)
        {
            return c;
        }
//      else if(strcmp(code, PolCode2017[c]) == 0)
//      {
//      	return c;
//      }
    }

    if (strlen(code) >= sizeof(t)) return BOCON_NO_OF_POL;    //防止输入的编码过长，引起异常

    memset(t, '\0', sizeof(t));
    strcpy(t, code);
    if (t[strlen(t) - 1] == 'Z')                      //是折算值，继续搜索
    {
        t[strlen(t) - 1] = '\0';
        for (c = 0; c < (BOCON_NO_OF_POL / 2); c++)
        {
            if (strcmp(t, PolCode[c]) == 0)
            {
                return (c + (BOCON_NO_OF_POL / 2));
            }
//         else if(strcmp(t, PolCode2017[c]) == 0)
//         {
//         	return (c + (BOCON_NO_OF_POL / 2));
//         }
        }
    }
    return BOCON_NO_OF_POL;                          //没有找到，返回 BOCON_NO_OF_POL
}

/*** Beginheader calcCodePosition */
void calcCodePosition(void);
/*** endheader */
//查询当前配置，将使用的通道序号存放到这个缓冲区
nodebug void calcCodePosition(void)
{
    auto char c;

    CodeNumber = 0;
    for (c = 0; c < 16; c++)
    {
        if ((ai_param[c].polIndex >= 0) && (ai_param[c].polIndex < BOCON_NO_OF_POL))
        { //本通道在用
            CodePosition[CodeNumber].posAI = c;
            CodePosition[CodeNumber++].posTable = ai_param[c].polIndex;
        }
    }
    for (c = 0; c < (ALLADCHANNELS - 16); c++)
    {
        if ((ai_param_extend[c].polIndex >= 0) && (ai_param_extend[c].polIndex < BOCON_NO_OF_POL))
        {
            CodePosition[CodeNumber].posAI = c + 16;
            CodePosition[CodeNumber++].posTable = ai_param_extend[c].polIndex;
        }
    }

    //printf("CodeNumber = %d\n", CodeNumber);
    //for(c=0;c<CodeNumber;c++) printf("%d %d,", CodePosition[c].posAI, CodePosition[c].posTable);
    //printf("\n");
}

/*******************************************************************************
当用户完成参数修改并退出设置界面后，自动调用本函数
检查用户的设置是否正确，特别是一些需要关联的参数
1、如果设置使用了折算值，则必须设置使用对应的实测值
2、如果设置使用了串口多参数扩展，则必须设置使用对应的串口
3、对应的串口使用第0个参数设置，其余的参数则在扩展配置处设置
*******************************************************************************/
/*** Beginheader check_user_config */
void check_user_config(void);
/*** endheader */
nodebug void check_user_config(void)
{
    auto unsigned char c, i, flag;

    flag = 0;
//以下循环检查AI参数是否有折算值，如有则确认是否有对应的实测值
    for (i = 0; i < 0x10; i++)
    {
        if ((ai_param[i].polIndex >= (BOCON_NO_OF_POL / 2)) && (ai_param[i].polIndex < BOCON_NO_OF_POL))
        { //本通道是折算值
            c = query_src_index(i);        //查找对应的实测值
            if (c == ALLADCHANNELS)      //如果没有找到，就将此折算值复位，标记为未用
            {
                ai_param[i].polIndex = BOCON_NO_OF_POL;
                wr_aiparam(i, CONFIG_IN_FLASH);
                flag = 1;
            }
        }
    }
//以下循环检查串口参数是否有折算值，如有则确认是否有对应的实测值
    for (i = 0x10; i < ALLADCHANNELS; i++)
    {
        if ((ai_param_extend[i - 0x10].polIndex > (BOCON_NO_OF_POL / 2)) && (ai_param_extend[i - 0x10].polIndex < BOCON_NO_OF_POL))
        {  //本通道是折算值
            c = query_src_index(i);        //查找对应的实测值
            if (c == ALLADCHANNELS)      //如果没有找到，就将此折算值复位，标记为未用
            {
                ai_param[i].polIndex = BOCON_NO_OF_POL;
                wr_aiparam_extend(i, CONFIG_IN_FLASH);
                flag = 1;
            }
        }
    }
//以下循环检查扩展参数的串口号和参数位号是否正常
    for (i = 0; i < 20; i++)
    {
        c = 0;
        if ((ai_param_extend[i].port > 7) || (ai_param_extend[i].position > 19))
        { //串口号有效值为0-6，7为未用标记，位号有效值为0-19
            c = 1;
        }

        if ((ai_param_extend[i].port < 7) && (ai_param_extend[i].polIndex < BOCON_NO_OF_POL)
            && (ai_param[ai_param_extend[i].port + 8].polIndex == BOCON_NO_OF_POL))
        { //如果扩展参数用到了某个串口，但是对应的串口却没有设为在用
            c = 1;
        }
        if (c == 1)
        {
            ai_param_extend[i].port = 7;
            ai_param_extend[i].position = 0;
            ai_param_extend[i].polIndex = BOCON_NO_OF_POL;
            wr_aiparam_extend(i, CONFIG_IN_FLASH);
            flag = 1;
        }
    }
//以下循环检查是否有重复的参数，如有，则将后面的那个清除掉
    for (i = 0; i < 16; i++)   //检查主表的参数
    {
        if (ai_param[i].polIndex < BOCON_NO_OF_POL)  //通道在用
        {
            for (c = i + 1; c < 16; c++)  //看主表里是否有重复的
            {
                if (ai_param[i].polIndex == ai_param[c].polIndex)
                {
                    ai_param[c].polIndex = BOCON_NO_OF_POL;
                    wr_aiparam(c, CONFIG_IN_FLASH);
                    flag = 1;
                }
            }
            for (c = 0; c < 20; c++)    //看扩展表里是否有重复的
            {
                if (ai_param[i].polIndex == ai_param_extend[c].polIndex)
                {
                    ai_param_extend[c].polIndex = BOCON_NO_OF_POL;
                    wr_aiparam_extend(c, CONFIG_IN_FLASH);
                    flag = 1;
                }
            }
        }
    }
    for (i = 0; i < 20; i++)    //检查扩展表的参数，此时扩展表里的参数已没有和主表重复的了
    {
        if (ai_param_extend[i].polIndex < BOCON_NO_OF_POL)   //通道在用
            for (c = i + 1; c < 20; c++)       //看扩展表里是否有重复的
            {
                if (ai_param_extend[i].polIndex == ai_param_extend[c].polIndex)
                {
                    ai_param_extend[c].polIndex = BOCON_NO_OF_POL;
                    wr_aiparam_extend(c, CONFIG_IN_FLASH);
                    flag = 1;
                }
            }
    }

    if (flag == 1)
    {
#ifdef COMPILE_SECONDARY_PROG
        t_config2 = t_config0 + 1000;
        wr_config2_tm();
#else
        t_config0 = t_config2 + 1000;
        wr_config0_tm();
#endif
    }
}

/*******************************************************************************
K37的污染物名称的显示接口函数的入口，支持所有的废水和废气参数
废水参数的地址范围：	 0 - 33	（共计34个参数）
废气参数的地址范围：	34 - 79	（共计46个参数）
*******************************************************************************/
/*** Beginheader glDispPol */
void glDispPol(int x, int y, char no);
/*** endheader */
nodebug void glDispPol(int x, int y, char no)
{
    switch (no)
    {
        //以下是废水参数的显示接口函数的入口，共计34个参数
    case 100:
        glDispZhe(x + 32, y + 1)
    case 0:
        glDispWater_00(x, y)        //污水流速
        break;

    case 101:
        glDispZhe(x + 32, y + 1)
    case 1:
        glDispWater_01(x, y)        //PH值
        break;

    case 102:
        glDispZhe(x + 31, y + 1)
    case 2:
        glDispWater_02(x, y)        //色度
        break;

    case 103:
        glDispZhe(x + 46, y + 1)
    case 3:
        glDispWater_03(x, y)        //悬浮物
        break;

    case 104:
        glDispZhe(x + 80, y + 1)
    case 4:
        glDispWater_04(x, y)        //生化需氧量
        break;

    case 105:
        glDispZhe(x + 80, y + 1)
    case 5:
        glDispWater_05(x, y)        //化学需氧量
        break;

    case 106:
        glDispZhe(x + 16, y + 1)
    case 6:
        glDispWater_06(x, y)      //总有机碳
        break;

    case 107:
        glDispZhe(x + 16, y)
    case 7:
        glDispWater_07(x, y)        //总汞
        break;

    case 108:
        glDispZhe(x + 16, y)
    case 8:
        glDispWater_08(x, y)      //烷基汞
        break;

    case 109:
        glDispZhe(x + 16, y + 1)
    case 9:
        glDispWater_09(x, y)        //总镉
        break;

    case 110:
        glDispZhe(x + 16, y)
    case 10:
        glDispWater_10(x, y)        //总铬
        break;

    case 111:
        glDispZhe(x + 16, y)
    case 11:
        glDispWater_11(x, y)        //六价铬
        break;

    case 112:
        glDispZhe(x + 16, y)
    case 12:
        glDispWater_12(x, y)        //三价铬
        break;

    case 113:
        glDispZhe(x + 15, y + 1)
    case 13:
        glDispWater_13(x, y)        //总砷
        break;

    case 114:
        glDispZhe(x + 16, y)
    case 14:
        glDispWater_14(x, y)        //总铅
        break;

    case 115:
        glDispZhe(x + 16, y + 1)
    case 15:
        glDispWater_15(x, y)        //总镍
        break;

    case 116:
        glDispZhe(x + 16, y + 1)
    case 16:
        glDispWater_16(x, y)        //总铜
        break;

    case 117:
        glDispZhe(x + 16, y + 1)
    case 17:
        glDispWater_17(x, y)        //总锌
        break;

    case 118:
        glDispZhe(x + 16, y)
    case 18:
        glDispWater_18(x, y)        //总锰
        break;

    case 119:
        glDispZhe(x + 16, y)
    case 19:
        glDispWater_19(x, y)        //总铁
        break;

    case 120:
        glDispZhe(x + 16, y)
    case 20:
        glDispWater_20(x, y)        //总银
        break;

    case 121:
        glDispZhe(x + 16, y)
    case 21:
        glDispWater_21(x, y)        //总铍
        break;

    case 122:
        glDispZhe(x + 16, y)
    case 22:
        glDispWater_22(x, y)        //总硒
        break;

    case 123:
        glDispZhe(x + 16, y + 1)
    case 23:
        glDispWater_23(x, y)        //锡
        break;

    case 124:
        glDispZhe(x + 16, y)
    case 24:
        glDispWater_24(x, y)        //硼
        break;

    case 125:
        glDispZhe(x + 15, y)
    case 25:
        glDispWater_25(x, y)        //钼
        break;

    case 126:
        glDispZhe(x + 16, y + 1)
    case 26:
        glDispWater_26(x, y)        //钡
        break;

    case 127:
        glDispZhe(x + 16, y)
    case 27:
        glDispWater_27(x, y)        //钴
        break;

    case 128:
        glDispZhe(x + 16, y)
    case 28:
        glDispWater_28(x, y)        //铊
        break;

    case 129:
        glDispZhe(x + 32, y + 1)
    case 29:
        glDispWater_29(x, y)        //氨氮
        break;

    case 130:
        glDispZhe(x + 16, y + 1)
    case 30:
        glDispWater_30(x, y)      //有机氮
        break;

    case 131:
        glDispZhe(x + 16, y + 1)
    case 31:
        glDispWater_31(x, y)        //总氮
        break;
    case 132:
        glDispZhe(x + 48, y + 1)
    case 32:
        glDispWater_32(x, y)        //石油类
        break;
    case 133:
        glDispZhe(x + 16, y + 1)
    case 33:
        glDispWater_33(x, y)        //总磷
        break;

        //以下是废气参数的显示接口函数的入口，共计46个参数
    case 134:
#if (FEIQI_BIAOKUANG_BMP == 1)
        glDispZhe(x + 32, y + 1)
#else
        glDispZhe(x + 16 * 4, y + 1)
#endif
    case 34:
        glDispSoot_00(x, y)     //废气
        break;

    case 135:
#if (YANCHEN_KELIWU_BMP == 1)
        glDispZhe(x + 32, y + 1)
#else
        glDispZhe(x + 16 * 3, y + 1)
#endif
    case 35:
        glDispSoot_01(x, y)     //烟尘
        break;
    case 136:
        glDispZhe(x + 63, y + 1)
    case 36:
        glDispSoot_02(x, y)     //二氧化硫
        break;

    case 137:
        glDispZhe(x + 63, y + 1)
    case 37:
        glDispSoot_03(x, y)     //氮氧化物
        break;

    case 138:
        glDispZhe(x + 63, y + 1)
    case 38:
        glDispSoot_04(x, y)     //一氧化碳
        break;
    case 139:
        glDispZhe(x + 48, y + 1)
    case 39:
        glDispSoot_05(x, y)     //硫化氢
        break;
    case 140:
        glDispZhe(x + 47, y + 1)
    case 40:
        glDispSoot_06(x, y)     //氟化物
        break;

    case 141:
        glDispZhe(x + 47, y + 1)
    case 41:
        glDispSoot_07(x, y)     //氰化物
        break;

    case 142:
        glDispZhe(x + 48, y + 1)
    case 42:
        glDispSoot_08(x, y)     //氯化氢
        break;

    case 143:
        glDispZhe(x + 48, y + 1)
    case 43:
        glDispSoot_09(x, y)       //沥青烟
        break;

    case 144:
        glDispZhe(x + 16, y + 1)
    case 44:
        glDispSoot_10(x, y)     //氨
        break;

    case 145:
        glDispZhe(x + 32, y + 1)
    case 45:
        glDispSoot_11(x, y)     //氯气
        break;

    case 146:
        glDispZhe(x + 63, y + 1)
    case 46:
        glDispSoot_12(x, y)     //二硫化碳
        break;

    case 147:
        glDispZhe(x + 32, y + 1)
    case 47:
        glDispSoot_13(x, y)       //硫醇
        break;

    case 148:
        glDispZhe(x + 48, y + 1)
    case 48:
        glDispSoot_14(x, y)       //硫酸雾
        break;

    case 149:
        glDispZhe(x + 48, y + 1)
    case 49:
        glDispSoot_15(x, y)       //铬酸雾
        break;

    case 150:
        glDispZhe(x + 47, y + 1)
    case 50:
        glDispSoot_16(x, y)       //苯系物
        break;

    case 151:
        glDispZhe(x + 31, y + 1)
    case 51:
        glDispSoot_17(x, y)     //甲苯
        break;

    case 152:
        glDispZhe(x + 47, y + 1)
    case 52:
        glDispSoot_18(x, y)     //二甲苯
        break;

    case 153:
        glDispZhe(x + 31, y + 1)
    case 53:
        glDispSoot_19(x, y)     //甲醛
        break;

    case 154:
        glDispZhe(x + 48, y + 1)
    case 54:
        glDispSoot_20(x, y)     //苯并花
        break;

    case 155:
        glDispZhe(x + 48, y + 1)
    case 55:
        glDispSoot_21(x, y)     //苯胺类
        break;

    case 156:
        glDispZhe(x + 63, y + 1)
    case 56:
        glDispSoot_22(x, y)     //硝基苯类
        break;

    case 157:
        glDispZhe(x + 48, y + 1)
    case 57:
        glDispSoot_23(x, y)     //氯苯类
        break;

    case 158:
        glDispZhe(x + 31, y + 1)
    case 58:
        glDispSoot_24(x, y)     //光气
        break;

    case 159:
        glDispZhe(x + 79, y + 1)
    case 59:
        glDispSoot_25(x, y)     //碳氢化合物
        break;

    case 160:
        glDispZhe(x + 32, y)
    case 60:
        glDispSoot_26(x, y)        //乙醛
        break;

    case 161:
        glDispZhe(x + 32, y + 1)
    case 61:
        glDispSoot_27(x, y)        //酚类
        break;

    case 162:
        glDispZhe(x + 31, y + 1)
    case 62:
        glDispSoot_28(x, y)     //甲醇
        break;

    case 163:
        glDispZhe(x + 48, y + 1)
    case 63:
        glDispSoot_29(x, y)     //氯乙烯
        break;

    case 164:
        glDispZhe(x + 63, y + 1)
    case 64:
        glDispSoot_30(x, y)     //二氧化碳
        break;

    case 165:
        glDispZhe(x + 16, y)
    case 65:
        glDispSoot_31(x, y)     //汞及化合物
        break;
    case 166:
        glDispZhe(x + 16, y)
    case 66:
        glDispSoot_32(x, y)     //铅及化合物
        break;
    case 167:
        glDispZhe(x + 16, y + 1)
    case 67:
        glDispSoot_33(x, y)     //镉及化合物
        break;
    case 168:
        glDispZhe(x + 16, y + 1)
    case 68:
        glDispSoot_34(x, y)     //锡及化合物
        break;
    case 169:
        glDispZhe(x + 16, y + 1)
    case 69:
        glDispSoot_35(x, y)     //镍及化合物
        break;
    case 170:
        glDispZhe(x + 16, y)
    case 70:
        glDispSoot_36(x, y)     //铍及化合物
        break;
    case 171:
        glDispZhe(x + 80, y + 1)
    case 71:
        glDispSoot_37(x, y)     //格林曼黑度
        break;

    case 172:
        glDispZhe(x + 47, y + 1)
    case 72:
        glDispSoot_38(x, y)     //氧含量
        break;

    case 173:
        glDispZhe(x + 64, y + 1)
    case 73:
        glDispSoot_39(x, y)     //烟气流速
        break;

    case 174:
        glDispZhe(x + 64, y + 1)
    case 74:
        glDispSoot_40(x, y)     //烟气温度
        break;

    case 175:
        glDispZhe(x + 64, y + 1)
    case 75:
        glDispSoot_41(x, y)     //烟气动压
        break;

    case 176:
        glDispZhe(x + 64, y + 1)
    case 76:
        glDispSoot_42(x, y)     //烟气湿度
        break;

    case 177:
        glDispZhe(x + 64, y + 1)
    case 77:
        glDispSoot_43(x, y)     //制冷温度
        break;

    case 178:
        glDispZhe(x + 80, y + 1)
    case 78:
        glDispSoot_44(x, y)     //烟道截面积
        break;

    case 179:
        glDispZhe(x + 63, y + 1)
    case 79:
        glDispSoot_45(x, y)     //烟气压力
        break;

        //以下是用户自定义参数的显示接口函数的入口，共计20个参数
    case 180:
        glDispZhe(x + 16 * 3, y + 1)
    case 80:
        glDispCustom_00(x, y)
        break;

    case 181:
        glDispZhe(x + 35, y + 1)
    case 81:
        glDispCustom_01(x, y)
        break;

    case 182:
        glDispZhe(x + 47, y + 1)
    case 82:
        glDispCustom_02(x, y)
        break;

    case 183:
        glDispZhe(x + 83, y + 1)
    case 83:
        glDispCustom_03(x, y)
        break;

    case 184:
        glDispZhe(x + 49, y + 1)
    case 84:
        glDispCustom_04(x, y)
        break;

    case 185:
        glDispZhe(x + 49, y + 1)
    case 85:
        glDispCustom_05(x, y)
        break;

    case 186:
        glDispZhe(x + 59, y + 1)
    case 86:
        glDispCustom_06(x, y)
        break;

    case 187:
        glDispZhe(x + 59, y + 1)
    case 87:
        glDispCustom_07(x, y)
        break;

    case 188:
        glDispZhe(x + 65, y + 1)
    case 88:
        glDispCustom_08(x, y)
        break;

    case 189:
        glDispZhe(x + 65, y + 1)
    case 89:
        glDispCustom_09(x, y)
        break;

    case 190:
        glDispZhe(x + 81, y + 1)
    case 90:
        glDispCustom_10(x, y)
        break;
    case 191:
        glDispZhe(x + 81, y + 1)
    case 91:
        glDispCustom_11(x, y)
        break;
    case 192:
        glDispZhe(x + 65, y + 1)
    case 92:
        glDispCustom_12(x, y)
        break;
    case 193:
        glDispZhe(x + 65, y + 1)
    case 93:
        glDispCustom_13(x, y)
        break;
    case 194:
        glDispZhe(x + 16, y)
    case 94:
        glDispCustom_14(x, y)
        break;
    case 195:
        glDispZhe(x + 16, y)
    case 95:
        glDispCustom_15(x, y)
        break;
    case 196:
        glDispZhe(x + 16, y)
    case 96:
        glDispCustom_16(x, y)
        break;
    case 197:
        glDispZhe(x + 16, y + 1)
    case 97:
        glDispCustom_17(x, y)
        break;
    case 198:
        glDispZhe(x + 16, y)
    case 98:
        glDispCustom_18(x, y)
        break;
    case 199:
        glDispZhe(x + 16, y + 1)
    case 99:
        glDispCustom_19(x, y)
        break;
    default:
        break;
    }
}

/*** BeginHeader */
#endif
/*** EndHeader */
