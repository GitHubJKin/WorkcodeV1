/*** Beginheader */
#ifndef __BOCON_POL_TABLE_CUSTOM1_LIB
#define __BOCON_POL_TABLE_CUSTOM1_LIB
/*** Endheader */

/*** Beginheader */
#use "yanqi_lihe_bmp_5socket.lib"
/*******************************************************************************
    K37初始化污染物编码表
1、废水共计34个参数
2、废气共计46个参数
3、客户自定义20个参数，参数编码和显示名称可根据项目随时调整
    20个参数编码的顺序需要与显示接口函数对应
*******************************************************************************/
//废水和废气共计80个参数，扩展20个，共计100个实际参数，参数表设有100个代码
//参数表的每个参数都可以有一个折算值
//折算值的编码为实际参数编码加上'Z'
//折算值的序号为实际参数的序号加上100
//这样就有100个折算值的虚拟参数
#define BOCON_NO_OF_POL		200

#if (ZHAOQINGLVTUO == 1)

const char *const PolCode2017[] =
{
//以下是废水污染物参数，共计34个
    /*污水 B01**pH值 001**色度 002**悬浮物 003**五日生化需氧量 010*/
    "w00000", "w01001", "w01002", "w01012", "w01017",
    /*化学需氧量 011**总有机碳 015**总汞 020**烷基汞 021**总镉 022*/
    "w01018", "w01020", "w20111", "w20113", "w20115",
    /*总铬 023**六价铬 024**三价铬 025**总砷 026**总铅 027*/
    "w20116", "w20117", "025", "w20119", "w20120",
    /*总镍 028**总铜 029**总锌 030**总锰 031**总铁 032*/
    "w20121", "w20122", "w20123", "w20124", "w20125",
    /*总银 033**总铍 034**总硒 035**锡 036**硼 037*/
    "w20126", "w20127", "w20128", "w20092", "w20023",
    /*钼 038**钡 039**钴 040**氟化物 072**氨氮 060*/
    "w20061", "w20012", "w20038", "w21017", "w21003",
    /*有机氮 061**总氮 065**石油类 080**总磷 101*/
    "w99001", "w21001", "w22001", "w21011",
//以下是废气污染物参数，共计46个
    /*废气 B02**烟尘 01**二氧化硫 02**氮氧化物 03**一氧化碳 04*/
    "a00000", "a34013", "a21026", "a21002", "a21005",
    /*硫化氢 05**氟化物 06**氰化物 07**氯化氢 08**沥青烟 09*/
    "a21028", "a21018", "a21017", "a21024", "a34038",
    /*氨(氨气) 10**氯气 11**二硫化碳 12**硫醇 13**硫酸雾 14*/
    "a21001", "a21022", "a99051", "a30022", "a34039",
    /*铬酸雾 15**苯系物 16**甲苯 17**二甲苯 18**甲醛 19*/
    "a34040", "16", "a25003", "a25005", "a31001",
    /*苯并[a]芘 20**苯胺类 21**硝基苯 22**氯苯 23**光气 24*/
    "a25044", "a26001", "a25023", "a25010", "a99049",
    /*碳氢化合物 25**乙醛 26**酚类 27**甲醇 28**氯乙烯 29*/
    "a24087", "a31002", "a23001", "a30001", "a24046",
    /*二氧化碳 30**汞及其化合物 31**铅及其化合物 32**镉及其化合物 33**锡及其化合物 34*/
    "a05001", "a20057", "a20043", "a20025", "a20091",
    /*镍及其化合物 35**铍及其化合物 36**林格曼黑度 37**氧气含量 S01**烟气流速 S02*/
    "a20063", "a20016", "a01010", "a19001", "a01011",
    /*烟气温度 S03**烟气动压 S04**烟气湿度 S05**制冷温度 S06**烟道截面积 S07*/
    "a01012", "a01017", "a01014", "a01015", "a01016",
    "a01013", /*烟气压力 S08*/
//以下是扩展的客户自定义参数，共计20个
    "NO1", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

const char *const PolCode[] =
{
    //以下是废水污染物参数，共计34个
    "B01", "001", "002", "003", "010", "011", "015", "020", "021", "022",
    "023", "024", "025", "026", "027", "028", "029", "030", "031", "032",
    "033", "034", "035", "036", "037", "038", "039", "040", "041", "060",
    "061", "065", "080", "101",
//以下是废气污染物参数，共计46个
    "B02", "01", "02", "03", "04", "05", "06", "07", "08", "09",
    "10",  "11", "12", "13", "14", "15", "16", "17", "18", "19",
    "20",  "21", "22", "23", "24", "25", "26", "27", "28", "29",
    "30",  "31", "32", "33", "34", "35", "36", "37", "S01", "S02",
    "S03", "S04", "S05", "S06", "S07", "S08",
//以下是扩展的客户自定义参数，共计20个
    "S09", "g20501", "g20502", "g20503", "g20504", "g20505", "g20506", "g20507", "g20508", "g20509",
    "g20510", "g20511", "g20512", "g20513", "g20514", "g20515", "NO17", "NO18", "NO19", "NO20",
};

#define glDispCustom_00(x, y)	{glXPutBitmap (x, y, 16*4, 16, ReTaiLiuLiang_BMP);}
#define glDispCustom_01(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "1");}
#define glDispCustom_02(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "2");}
#define glDispCustom_03(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "3");}
#define glDispCustom_04(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "4");}
#define glDispCustom_05(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "5");}
#define glDispCustom_06(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "6");}
#define glDispCustom_07(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "7");}
#define glDispCustom_08(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "8");}
#define glDispCustom_09(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "9");}
#define glDispCustom_10(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "10");}
#define glDispCustom_11(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "11");}
#define glDispCustom_12(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "12");}
#define glDispCustom_13(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "13");}
#define glDispCustom_14(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "14");}
#define glDispCustom_15(x, y)	{glXPutBitmap (x, y, 16*4, 16, LuTangChuangWen_BMP);}{glPrintf(x+16*4,  y, &fi12x16, "15");}
#define glDispCustom_16(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_17(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_18(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_19(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}

xdata ReTaiLiuLiang_BMP {
	'\x10', '\x40', '\x01', '\x00', '\x00', '\x80', '\x00', '\x00',
	'\x10', '\x40', '\x01', '\x00', '\x20', '\x40', '\x1F', '\xF0',
	'\x10', '\x40', '\x7F', '\xFC', '\x17', '\xFE', '\x10', '\x10',
	'\xFD', '\xF8', '\x01', '\x00', '\x10', '\x80', '\x1F', '\xF0',
	'\x10', '\x48', '\x02', '\x80', '\x81', '\x10', '\x10', '\x10',
	'\x10', '\x48', '\x04', '\x40', '\x42', '\x08', '\xFF', '\xFE',
	'\x1C', '\xC8', '\x0A', '\x20', '\x47', '\xFC', '\x00', '\x00',
	'\x30', '\x48', '\x31', '\x18', '\x10', '\x04', '\x1F', '\xF0',
	'\xD0', '\xAA', '\xC0', '\x06', '\x10', '\x00', '\x11', '\x10',
	'\x10', '\xAA', '\x01', '\x00', '\x22', '\x48', '\x1F', '\xF0',
	'\x51', '\x06', '\x08', '\x88', '\xE2', '\x48', '\x11', '\x10',
	'\x22', '\x02', '\x48', '\x84', '\x22', '\x48', '\x1F', '\xF0',
	'\x00', '\x00', '\x48', '\x12', '\x22', '\x48', '\x01', '\x00',
	'\x48', '\x88', '\x48', '\x12', '\x22', '\x4A', '\x1F', '\xF0',
	'\x44', '\x44', '\x87', '\xF0', '\x24', '\x4A', '\x01', '\x00',
	'\x84', '\x44', '\x00', '\x00', '\x08', '\x46', '\x7F', '\xFC'
};

xdata LuTangChuangWen_BMP {
'\x10','\x80','\x00','\x20','\x01','\x00','\x00','\x00',
'\x10','\x40','\x79','\x24','\x00','\x80','\x23','\xF8',
'\x10','\x40','\x48','\xA8','\x3F','\xFE','\x12','\x08',
'\x15','\xFC','\x4B','\xFE','\x20','\x00','\x12','\x08',
'\x59','\x04','\x4A','\x02','\x20','\x80','\x83','\xF8',
'\x51','\x04','\x78','\xF8','\x20','\x80','\x42','\x08',
'\x51','\x04','\x48','\x88','\x2F','\xFC','\x42','\x08',
'\x91','\xFC','\x48','\x88','\x20','\x80','\x13','\xF8',
'\x11','\x04','\x48','\xF8','\x21','\xC0','\x10','\x00',
'\x11','\x00','\x78','\x20','\x22','\xA0','\x27','\xFC',
'\x11','\x00','\x48','\x20','\x22','\xA0','\xE4','\xA4',
'\x29','\x00','\x49','\xFC','\x24','\x90','\x24','\xA4',
'\x26','\x00','\x48','\x20','\x48','\x88','\x24','\xA4',
'\x42','\x00','\x48','\x20','\x50','\x86','\x24','\xA4',
'\x44','\x00','\x4B','\xFE','\x80','\x80','\x2F','\xFE',
'\x88','\x00','\x98','\x00','\x00','\x80','\x00','\x00'
};

#define ________________JIAOTONGWUZI________________
#elif ((JIAOTONGWUZI == 1)||(CHANGSHAHUASHIJIE == 1))

const char *const PolCode2017[] =
{
//以下是废水污染物参数，共计34个
    /*污水 B01**pH值 001**色度 002**悬浮物 003**五日生化需氧量 010*/
    "w00000", "w01001", "w01002", "w01012", "w01017",
    /*化学需氧量 011**总有机碳 015**总汞 020**烷基汞 021**总镉 022*/
    "w01018", "w01020", "w20111", "w20113", "w20115",
    /*总铬 023**六价铬 024**三价铬 025**总砷 026**总铅 027*/
    "w20116", "w20117", "025", "w20119", "w20120",
    /*总镍 028**总铜 029**总锌 030**总锰 031**总铁 032*/
    "w20121", "w20122", "w20123", "w20124", "w20125",
    /*总银 033**总铍 034**总硒 035**锡 036**硼 037*/
    "w20126", "w20127", "w20128", "w20092", "w20023",
    /*钼 038**钡 039**钴 040**氟化物 072**氨氮 060*/
    "w20061", "w20012", "w20038", "w21017", "w21003",
    /*有机氮 061**总氮 065**石油类 080**总磷 101*/
    "w99001", "w21001", "w22001", "w21011",
//以下是废气污染物参数，共计46个
    /*废气 B02**烟尘 01**二氧化硫 02**氮氧化物 03**一氧化碳 04*/
    "a00000", "a34013", "a21026", "a21002", "a21005",
    /*硫化氢 05**氟化物 06**氰化物 07**氯化氢 08**沥青烟 09*/
    "a21028", "a21018", "a21017", "a21024", "a34038",
    /*氨(氨气) 10**氯气 11**二硫化碳 12**硫醇 13**硫酸雾 14*/
    "a21001", "a21022", "a99051", "a30022", "a34039",
    /*铬酸雾 15**苯系物 16**甲苯 17**二甲苯 18**甲醛 19*/
    "a34040", "16", "a25003", "a25005", "a31001",
    /*苯并[a]芘 20**苯胺类 21**硝基苯 22**氯苯 23**光气 24*/
    "a25044", "a26001", "a25023", "a25010", "a99049",
    /*碳氢化合物 25**乙醛 26**酚类 27**甲醇 28**氯乙烯 29*/
    "a24087", "a31002", "a23001", "a30001", "a24046",
    /*二氧化碳 30**汞及其化合物 31**铅及其化合物 32**镉及其化合物 33**锡及其化合物 34*/
    "a05001", "a20057", "a20043", "a20025", "a20091",
    /*镍及其化合物 35**铍及其化合物 36**林格曼黑度 37**氧气含量 S01**烟气流速 S02*/
    "a20063", "a20016", "a01010", "a19001", "a01011",
    /*烟气温度 S03**烟气动压 S04**烟气湿度 S05**制冷温度 S06**烟道截面积 S07*/
    "a01012", "a01017", "a01014", "a01015", "a01016",
    "a01013", /*烟气压力 S08*/
//以下是扩展的客户自定义参数，共计20个
    "NO1", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

const char *const PolCode[] =
{
    //以下是废水污染物参数，共计34个
    "B01", "001", "002", "003", "010", "011", "015", "020", "021", "022",
    "023", "024", "025", "026", "027", "028", "029", "030", "031", "032",
    "033", "034", "035", "036", "037", "038", "039", "040", "041", "060",
    "061", "065", "080", "101",
//以下是废气污染物参数，共计46个
    "B02", "01", "02", "03", "04", "05", "06", "07", "08", "09",
    "10",  "11", "12", "13", "14", "15", "16", "17", "18", "19",
    "20",  "21", "22", "23", "24", "25", "26", "27", "28", "29",
    "30",  "31", "32", "33", "34", "35", "36", "37", "S01", "S02",
    "S03", "S04", "S05", "S06", "S07", "S08",
//以下是扩展的客户自定义参数，共计20个
"901", "902", "T10", "T11", "T12", "T13", "T14", "T20", "T21", "T22",
"T23", "T24", "T30", "T31", "T32", "T33", "T43", "T40", "T41", "T42",
};

#define glDispCustom_00(x, y)	{glXPutBitmap (x, y, 63, 16, avgTemp_bmp);}
#define glDispCustom_01(x, y)	{glXPutBitmap (x, y, 55, 16, dcsTemp_bmp);}
#define glDispCustom_02(x, y)	{glXPutBitmap (x, y, 63, 16, topTemp_bmp);glPrintf(x+64, y+2, &fi12x16, "1");}
#define glDispCustom_03(x, y)	{glXPutBitmap (x, y, 63, 16, topTemp_bmp);glPrintf(x+64, y+2, &fi12x16, "2");}
#define glDispCustom_04(x, y)	{glXPutBitmap (x, y, 63, 16, topTemp_bmp);glPrintf(x+64, y+2, &fi12x16, "3");}
#define glDispCustom_05(x, y)	{glXPutBitmap (x, y, 63, 16, topTemp_bmp);glPrintf(x+64, y+2, &fi12x16, "4");}
#define glDispCustom_06(x, y)	{glXPutBitmap (x, y, 63, 16, topTemp_bmp);glPrintf(x+64, y+2, &fi12x16, "5");}
#define glDispCustom_07(x, y)	{glXPutBitmap (x, y, 61, 16, modTemp_bmp);glPrintf(x+62, y+2, &fi12x16, "1");}
#define glDispCustom_08(x, y)	{glXPutBitmap (x, y, 61, 16, modTemp_bmp);glPrintf(x+62, y+2, &fi12x16, "2");}
#define glDispCustom_09(x, y)	{glXPutBitmap (x, y, 61, 16, modTemp_bmp);glPrintf(x+62, y+2, &fi12x16, "3");}
#define glDispCustom_10(x, y)	{glXPutBitmap (x, y, 61, 16, modTemp_bmp);glPrintf(x+62, y+2, &fi12x16, "4");}
#define glDispCustom_11(x, y)	{glXPutBitmap (x, y, 61, 16, modTemp_bmp);glPrintf(x+62, y+2, &fi12x16, "5");}
#define glDispCustom_12(x, y)	{glXPutBitmap (x, y, 63, 16, lowTemp_bmp);glPrintf(x+64, y+2, &fi12x16, "1");}
#define glDispCustom_13(x, y)	{glXPutBitmap (x, y, 63, 16, lowTemp_bmp);glPrintf(x+64, y+2, &fi12x16, "2");}
#define glDispCustom_14(x, y)	{glXPutBitmap (x, y, 63, 16, lowTemp_bmp);glPrintf(x+64, y+2, &fi12x16, "3");}
#define glDispCustom_15(x, y)	{glXPutBitmap (x, y, 63, 16, lowTemp_bmp);glPrintf(x+64, y+2, &fi12x16, "4");}
#define glDispCustom_16(x, y)	{glXPutBitmap (x, y, 63, 16, secondTemp_bmp);glPrintf(x+64, y+2, &fi12x16, "4");}
#define glDispCustom_17(x, y)	{glXPutBitmap (x, y, 63, 16, secondTemp_bmp);glPrintf(x+64, y+2, &fi12x16, "1");}
#define glDispCustom_18(x, y)	{glXPutBitmap (x, y, 63, 16, secondTemp_bmp);glPrintf(x+64, y+2, &fi12x16, "2");}
#define glDispCustom_19(x, y)	{glXPutBitmap (x, y, 63, 16, secondTemp_bmp);glPrintf(x+64, y+2, &fi12x16, "3");}

//原SO2值
xdata yuanSO2_BMP {
'\x00','\x00','\x00','\x80','\x00','\x40','\x08','\x40',
'\x3F','\xFE','\x20','\x40','\x20','\x40','\x08','\x40',
'\x20','\x80','\x17','\xFE','\x17','\xFC','\x0F','\xFC',
'\x21','\x00','\x10','\x80','\x10','\x40','\x10','\x40',
'\x27','\xF0','\x81','\x10','\x03','\xF8','\x10','\x40',
'\x24','\x10','\x42','\x08','\x02','\x48','\x33','\xF8',
'\x24','\x10','\x47','\xFC','\xF2','\x48','\x32','\x08',
'\x27','\xF0','\x10','\x04','\x13','\xF8','\x53','\xF8',
'\x24','\x10','\x10','\x00','\x10','\xE0','\x92','\x08',
'\x24','\x10','\x22','\x48','\x11','\x50','\x13','\xF8',
'\x27','\xF0','\xE2','\x48','\x12','\x48','\x12','\x08',
'\x20','\x80','\x22','\x48','\x14','\x44','\x13','\xF8',
'\x24','\x90','\x22','\x48','\x10','\x40','\x12','\x08',
'\x48','\x88','\x22','\x4A','\x28','\x00','\x12','\x08',
'\x52','\x84','\x24','\x4A','\x47','\xFE','\x1F','\xFE',
'\x81','\x00','\x08','\x46','\x00','\x00','\x10','\x00'
};

//平均温度
xdata avgTemp_bmp {
'\x00','\x00','\x10','\x40','\x00','\x00','\x01','\x01',
'\x7F','\xFC','\x10','\x40','\x23','\xF8','\x00','\x81',
'\x01','\x00','\x10','\x80','\x12','\x08','\x3F','\xFF',
'\x01','\x00','\x10','\xFC','\x12','\x08','\x22','\x21',
'\x11','\x10','\x11','\x04','\x83','\xF8','\x22','\x21',
'\x09','\x10','\xFE','\x04','\x42','\x08','\x3F','\xFD',
'\x09','\x20','\x10','\x84','\x42','\x08','\x22','\x21',
'\x01','\x00','\x10','\x44','\x13','\xF8','\x22','\x21',
'\xFF','\xFE','\x10','\x44','\x10','\x00','\x23','\xE1',
'\x01','\x00','\x10','\x14','\x27','\xFC','\x20','\x01',
'\x01','\x00','\x10','\x24','\xE4','\xA4','\x2F','\xF1',
'\x01','\x00','\x1C','\x44','\x24','\xA4','\x24','\x11',
'\x01','\x00','\xE1','\x84','\x24','\xA4','\x42','\x21',
'\x01','\x00','\x40','\x04','\x24','\xA4','\x41','\xC1',
'\x01','\x00','\x00','\x28','\x2F','\xFE','\x86','\x31',
'\x01','\x00','\x00','\x10','\x00','\x00','\x38','\x0F'
};
//DCS温度
xdata dcsTemp_bmp {
'\x00','\x00','\x00','\x00','\x00','\x01','\x01',
'\x00','\x00','\x00','\x23','\xF8','\x00','\x81',
'\x00','\x00','\x00','\x12','\x08','\x3F','\xFF',
'\xF8','\x3E','\x3E','\x12','\x08','\x22','\x21',
'\x44','\x42','\x42','\x83','\xF8','\x22','\x21',
'\x42','\x42','\x42','\x42','\x08','\x3F','\xFD',
'\x42','\x80','\x40','\x42','\x08','\x22','\x21',
'\x42','\x80','\x20','\x13','\xF8','\x22','\x21',
'\x42','\x80','\x18','\x10','\x00','\x23','\xE1',
'\x42','\x80','\x04','\x27','\xFC','\x20','\x01',
'\x42','\x80','\x02','\xE4','\xA4','\x2F','\xF1',
'\x42','\x42','\x42','\x24','\xA4','\x24','\x11',
'\x44','\x44','\x42','\x24','\xA4','\x42','\x21',
'\xF8','\x38','\x7C','\x24','\xA4','\x41','\xC1',
'\x00','\x00','\x00','\x2F','\xFE','\x86','\x31',
'\x00','\x00','\x00','\x00','\x00','\x38','\x0F'
};
//上部温度
xdata topTemp_bmp {
'\x02','\x00','\x10','\x00','\x00','\x00','\x01','\x01',
'\x02','\x00','\x08','\x3E','\x23','\xF8','\x00','\x81',
'\x02','\x00','\x7F','\xA2','\x12','\x08','\x3F','\xFF',
'\x02','\x00','\x00','\x24','\x12','\x08','\x22','\x21',
'\x02','\x00','\x21','\x24','\x83','\xF8','\x22','\x21',
'\x02','\x00','\x12','\x28','\x42','\x08','\x3F','\xFD',
'\x03','\xF8','\xFF','\xE4','\x42','\x08','\x22','\x21',
'\x02','\x00','\x00','\x24','\x13','\xF8','\x22','\x21',
'\x02','\x00','\x00','\x22','\x10','\x00','\x23','\xE1',
'\x02','\x00','\x3F','\x22','\x27','\xFC','\x20','\x01',
'\x02','\x00','\x21','\x22','\xE4','\xA4','\x2F','\xF1',
'\x02','\x00','\x21','\x34','\x24','\xA4','\x24','\x11',
'\x02','\x00','\x21','\x28','\x24','\xA4','\x42','\x21',
'\x02','\x00','\x3F','\x20','\x24','\xA4','\x41','\xC1',
'\xFF','\xFE','\x21','\x20','\x2F','\xFE','\x86','\x31',
'\x00','\x00','\x00','\x20','\x00','\x00','\x38','\x0F'
};
//中部温度
xdata modTemp_bmp {
'\x04','\x00','\x40','\x00','\x00','\x00','\x04','\x07',
'\x04','\x00','\x20','\xF8','\x8F','\xE0','\x02','\x07',
'\x04','\x01','\xFE','\x88','\x48','\x20','\xFF','\xFF',
'\x04','\x00','\x00','\x90','\x48','\x20','\x88','\x87',
'\xFF','\xE0','\x84','\x92','\x0F','\xE0','\x88','\x87',
'\x84','\x20','\x48','\xA1','\x08','\x20','\xFF','\xF7',
'\x84','\x23','\xFF','\x91','\x08','\x20','\x88','\x87',
'\x84','\x20','\x00','\x90','\x4F','\xE0','\x88','\x87',
'\x84','\x20','\x00','\x88','\x40','\x00','\x8F','\x87',
'\x84','\x20','\xFC','\x88','\x9F','\xF0','\x80','\x07',
'\xFF','\xE0','\x84','\x8B','\x92','\x90','\xBF','\xC7',
'\x84','\x20','\x84','\xD0','\x92','\x90','\x90','\x47',
'\x04','\x00','\x84','\xA0','\x92','\x91','\x08','\x87',
'\x04','\x00','\xFC','\x80','\x92','\x91','\x07','\x07',
'\x04','\x00','\x84','\x80','\xBF','\xFA','\x18','\xC7',
'\x04','\x00','\x00','\x80','\x00','\x00','\xE0','\x3F'
};
//下部温度
xdata lowTemp_bmp {
'\x00','\x00','\x10','\x00','\x00','\x00','\x01','\x01',
'\xFF','\xFE','\x08','\x3E','\x23','\xF8','\x00','\x81',
'\x02','\x00','\x7F','\xA2','\x12','\x08','\x3F','\xFF',
'\x02','\x00','\x00','\x24','\x12','\x08','\x22','\x21',
'\x02','\x00','\x21','\x24','\x83','\xF8','\x22','\x21',
'\x02','\x00','\x12','\x28','\x42','\x08','\x3F','\xFD',
'\x02','\x40','\xFF','\xE4','\x42','\x08','\x22','\x21',
'\x02','\x20','\x00','\x24','\x13','\xF8','\x22','\x21',
'\x02','\x10','\x00','\x22','\x10','\x00','\x23','\xE1',
'\x02','\x08','\x3F','\x22','\x27','\xFC','\x20','\x01',
'\x02','\x08','\x21','\x22','\xE4','\xA4','\x2F','\xF1',
'\x02','\x00','\x21','\x34','\x24','\xA4','\x24','\x11',
'\x02','\x00','\x21','\x28','\x24','\xA4','\x42','\x21',
'\x02','\x00','\x3F','\x20','\x24','\xA4','\x41','\xC1',
'\x02','\x00','\x21','\x20','\x2F','\xFE','\x86','\x31',
'\x02','\x00','\x00','\x20','\x00','\x00','\x38','\x0F'
};
//二次温度
xdata secondTemp_bmp {
'\x00','\x00','\x00','\x80','\x00','\x00','\x01','\x01',
'\x00','\x00','\x40','\x80','\x23','\xF8','\x00','\x81',
'\x00','\x00','\x20','\x80','\x12','\x08','\x3F','\xFF',
'\x3F','\xF8','\x20','\xFC','\x12','\x08','\x22','\x21',
'\x00','\x00','\x01','\x04','\x83','\xF8','\x22','\x21',
'\x00','\x00','\x09','\x08','\x42','\x08','\x3F','\xFD',
'\x00','\x00','\x0A','\x40','\x42','\x08','\x22','\x21',
'\x00','\x00','\x14','\x40','\x13','\xF8','\x22','\x21',
'\x00','\x00','\x10','\x40','\x10','\x00','\x23','\xE1',
'\x00','\x00','\xE0','\xA0','\x27','\xFC','\x20','\x01',
'\x00','\x00','\x20','\xA0','\xE4','\xA4','\x2F','\xF1',
'\x00','\x00','\x21','\x10','\x24','\xA4','\x24','\x11',
'\xFF','\xFE','\x21','\x10','\x24','\xA4','\x42','\x21',
'\x00','\x00','\x22','\x08','\x24','\xA4','\x41','\xC1',
'\x00','\x00','\x24','\x04','\x2F','\xFE','\x86','\x31',
'\x00','\x00','\x08','\x02','\x00','\x00','\x38','\x0F'
};

#define ________________HANGZHOUHAICHI________________
#elif (HANGZHOUHAICHI == 1)

const char *const PolCode2017[] =
{
//以下是废水污染物参数，共计34个
    /*污水 B01**pH值 001**色度 002**悬浮物 003**五日生化需氧量 010*/
    "w00000", "w01001", "w01002", "w01012", "w01017",
    /*化学需氧量 011**总有机碳 015**总汞 020**烷基汞 021**总镉 022*/
    "w01018", "w01020", "w20111", "w20113", "w20115",
    /*总铬 023**六价铬 024**三价铬 025**总砷 026**总铅 027*/
    "w20116", "w20117", "025", "w20119", "w20120",
    /*总镍 028**总铜 029**总锌 030**总锰 031**总铁 032*/
    "w20121", "w20122", "w20123", "w20124", "w20125",
    /*总银 033**总铍 034**总硒 035**锡 036**硼 037*/
    "w20126", "w20127", "w20128", "w20092", "w20023",
    /*钼 038**钡 039**钴 040**氟化物 072**氨氮 060*/
    "w20061", "w20012", "w20038", "w21017", "w21003",
    /*有机氮 061**总氮 065**石油类 080**总磷 101*/
    "w99001", "w21001", "w22001", "w21011",
//以下是废气污染物参数，共计46个
    /*废气 B02**烟尘 01**二氧化硫 02**氮氧化物 03**一氧化碳 04*/
    "a00000", "a34013", "a21026", "a21002", "a21005",
    /*硫化氢 05**氟化物 06**氰化物 07**氯化氢 08**沥青烟 09*/
    "a21028", "a21018", "a21017", "a21024", "a34038",
    /*氨(氨气) 10**氯气 11**二硫化碳 12**硫醇 13**硫酸雾 14*/
    "a21001", "a21022", "a99051", "a30022", "a34039",
    /*铬酸雾 15**苯系物 16**甲苯 17**二甲苯 18**甲醛 19*/
    "a34040", "16", "a25003", "a25005", "a31001",
    /*苯并[a]芘 20**苯胺类 21**硝基苯 22**氯苯 23**光气 24*/
    "a25044", "a26001", "a25023", "a25010", "a99049",
    /*碳氢化合物 25**乙醛 26**酚类 27**甲醇 28**氯乙烯 29*/
    "a24087", "a31002", "a23001", "a30001", "a24046",
    /*二氧化碳 30**汞及其化合物 31**铅及其化合物 32**镉及其化合物 33**锡及其化合物 34*/
    "a05001", "a20057", "a20043", "a20025", "a20091",
    /*镍及其化合物 35**铍及其化合物 36**林格曼黑度 37**氧气含量 S01**烟气流速 S02*/
    "a20063", "a20016", "a01010", "a19001", "a01011",
    /*烟气温度 S03**烟气动压 S04**烟气湿度 S05**制冷温度 S06**烟道截面积 S07*/
    "a01012", "a01017", "a01014", "a01015", "a01016",
    "a01013", /*烟气压力 S08*/
//以下是扩展的客户自定义参数，共计20个
    "NO1", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

const char *const PolCode[] =
{
    //以下是废水污染物参数，共计34个
    "B01", "001", "002", "003", "010", "011", "015", "020", "021", "022",
    "023", "024", "025", "026", "027", "028", "029", "030", "031", "032",
    "033", "034", "035", "036", "037", "038", "039", "040", "041", "060",
    "061", "065", "080", "101", 
//以下是废气污染物参数，共计46个
    "B02", "01", "02", "03", "04", "05", "06", "07", "08", "09",
    "10",  "11", "12", "13", "14", "15", "16", "17", "18", "19",
    "20",  "21", "22", "23", "24", "25", "26", "27", "28", "29",
    "30",  "31", "32", "33", "34", "35", "36", "37", "S01", "S02",
    "S03", "S04", "S05", "S06", "S07", "S08",
//以下是扩展的客户自定义参数，共计20个
    "NO1", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

#define glDispCustom_00(x, y)	{glXPutBitmap (x, y, 16*2, 16, yidan_BMP);}
#define glDispCustom_01(x, y)	{glXPutBitmap (x, y, 16*2, 16, erdan_BMP);}
#define glDispCustom_02(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_03(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_04(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_05(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_06(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_07(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_08(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_09(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_10(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_11(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_12(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_13(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_14(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_15(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_16(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_17(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_18(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_19(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
//一氮
xdata yidan_BMP {
'\x00','\x00','\x20','\x00',
'\x00','\x00','\x3F','\xFC',
'\x00','\x00','\x40','\x00',
'\x00','\x00','\x9F','\xF0',
'\x00','\x00','\x00','\x00',
'\x00','\x00','\x7F','\xF0',
'\x00','\x00','\x04','\x10',
'\xFF','\xFE','\x24','\x90',
'\x00','\x00','\x0B','\x10',
'\x00','\x00','\x10','\x90',
'\x00','\x00','\x60','\x50',
'\x00','\x00','\x04','\x12',
'\x00','\x00','\x24','\x8A',
'\x00','\x00','\x0B','\x0A',
'\x00','\x00','\x10','\x86',
'\x00','\x00','\x60','\x42'
};
//二氮
xdata erdan_BMP {
'\x00','\x00','\x20','\x00',
'\x00','\x00','\x3F','\xFC',
'\x00','\x00','\x40','\x00',
'\x3F','\xF8','\x9F','\xF0',
'\x00','\x00','\x00','\x00',
'\x00','\x00','\x7F','\xF0',
'\x00','\x00','\x04','\x10',
'\x00','\x00','\x24','\x90',
'\x00','\x00','\x0B','\x10',
'\x00','\x00','\x10','\x90',
'\x00','\x00','\x60','\x50',
'\x00','\x00','\x04','\x12',
'\xFF','\xFE','\x24','\x8A',
'\x00','\x00','\x0B','\x0A',
'\x00','\x00','\x10','\x86',
'\x00','\x00','\x60','\x42'
};

#define __________XIAMENYUANSHENGTAI__________
#elif (XIAMENYUANSHENGTAI == 1)

const char *const PolCode2017[] =
{
//以下是废水污染物参数，共计34个
    /*污水 B01**pH值 001**色度 002**悬浮物 003**五日生化需氧量 010*/
    "w00000", "w01001", "w01002", "w01012", "w01017",
    /*化学需氧量 011**总有机碳 015**总汞 020**烷基汞 021**总镉 022*/
    "w01018", "w01020", "w20111", "w20113", "w20115",
    /*总铬 023**六价铬 024**三价铬 025**总砷 026**总铅 027*/
    "w20116", "w20117", "025", "w20119", "w20120",
    /*总镍 028**总铜 029**总锌 030**总锰 031**总铁 032*/
    "w20121", "w20122", "w20123", "w20124", "w20125",
    /*总银 033**总铍 034**总硒 035**锡 036**硼 037*/
    "w20126", "w20127", "w20128", "w20092", "w20023",
    /*钼 038**钡 039**钴 040**氟化物 072**氨氮 060*/
    "w20061", "w20012", "w20038", "w21017", "w21003",
    /*有机氮 061**总氮 065**石油类 080**总磷 101*/
    "w99001", "w21001", "w22001", "w21011",
//以下是废气污染物参数，共计46个
    /*废气 B02**烟尘 01**二氧化硫 02**氮氧化物 03**一氧化碳 04*/
    "a00000", "a34013", "a21026", "a21002", "a21005",
    /*硫化氢 05**氟化物 06**氰化物 07**氯化氢 08**沥青烟 09*/
    "a21028", "a21018", "a21017", "a21024", "a34038",
    /*氨(氨气) 10**氯气 11**二硫化碳 12**硫醇 13**硫酸雾 14*/
    "a21001", "a21022", "a99051", "a30022", "a34039",
    /*铬酸雾 15**苯系物 16**甲苯 17**二甲苯 18**甲醛 19*/
    "a34040", "16", "a25003", "a25005", "a31001",
    /*苯并[a]芘 20**苯胺类 21**硝基苯 22**氯苯 23**光气 24*/
    "a25044", "a26001", "a25023", "a25010", "a99049",
    /*碳氢化合物 25**乙醛 26**酚类 27**甲醇 28**氯乙烯 29*/
    "a24087", "a31002", "a23001", "a30001", "a24046",
    /*二氧化碳 30**汞及其化合物 31**铅及其化合物 32**镉及其化合物 33**锡及其化合物 34*/
    "a05001", "a20057", "a20043", "a20025", "a20091",
    /*镍及其化合物 35**铍及其化合物 36**林格曼黑度 37**氧气含量 S01**烟气流速 S02*/
    "a20063", "a20016", "a01010", "a19001", "a01011",
    /*烟气温度 S03**烟气动压 S04**烟气湿度 S05**制冷温度 S06**烟道截面积 S07*/
    "a01012", "a01017", "a01014", "a01015", "a01016",
    "a01013", /*烟气压力 S08*/
//以下是扩展的客户自定义参数，共计20个
    "a05002", "a24088", "a25002", "a25004", "a25006", "a25007", "a25008", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

const char *const PolCode[] =
{
    //以下是废水污染物参数，共计34个
    "B01", "001", "002", "003", "010", "011", "015", "020", "021", "022",
    "023", "024", "025", "026", "027", "028", "029", "030", "031", "032",
    "033", "034", "035", "036", "037", "038", "039", "040", "041", "060",
    "061", "065", "080", "101",
//以下是废气污染物参数，共计46个
    "B02", "01", "02", "03", "04", "05", "a21018", "07", "08", "09",
    "a21001",  "11", "12", "13", "14", "15", "16", "a25003", "a25005", "19",
    "20",  "21", "22", "23", "24", "a24087", "26", "27", "28", "29",
    "30",  "31", "32", "33", "34", "35", "36", "37", "S01", "S02",
    "S03", "S04", "S05", "S06", "S07", "S08",
//以下是扩展的客户自定义参数，共计20个
    "a05002", "a24088", "a25002", "a25004", "a25006", "a25007", "a25008", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

#define glDispCustom_00(x, y)	{glXPutBitmap (x, y, 16*2, 16, jiawan_BMP);}
#define glDispCustom_01(x, y)	{glXPutBitmap (x, y, 16*5, 16, feijiawanzongtin_BMP);}
#define glDispCustom_02(x, y)	{glXPutBitmap (x, y, 16*1, 16, ben_BMP);}
#define glDispCustom_03(x, y)	{glXPutBitmap (x, y, 16*2, 16, yiben_BMP);}
#define glDispCustom_04(x, y)	{glXPutBitmap (x, y, 16*1, 16, lin_BMP);} {glXPutBitmap (x+16*1, y, 46, 16, bocon_18_bmp);}
#define glDispCustom_05(x, y)	{glXPutBitmap (x, y, 16*1, 16, jian_BMP);}{glXPutBitmap (x+16*1, y, 46, 16, bocon_18_bmp);}
#define glDispCustom_06(x, y)	{glXPutBitmap (x, y, 16*1, 16, dui_BMP);} {glXPutBitmap (x+16*1, y, 46, 16, bocon_18_bmp);}
#define glDispCustom_07(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_08(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_09(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_10(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_11(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_12(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_13(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_14(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_15(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_16(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_17(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_18(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_19(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
//甲烷
xdata jiawan_BMP {
'\x00','\x00','\x10','\x40',
'\x3F','\xF8','\x10','\x20',
'\x21','\x08','\x13','\xFE',
'\x21','\x08','\x16','\x02',
'\x21','\x08','\x5C','\x04',
'\x3F','\xF8','\x51','\xF8',
'\x21','\x08','\x50','\x00',
'\x21','\x08','\x90','\x00',
'\x21','\x08','\x13','\xFE',
'\x3F','\xF8','\x10','\x90',
'\x21','\x08','\x10','\x90',
'\x01','\x00','\x28','\x90',
'\x01','\x00','\x25','\x12',
'\x01','\x00','\x41','\x12',
'\x01','\x00','\x42','\x0E',
'\x01','\x00','\x84','\x00'
};
//非甲烷总烃
xdata feijiawanzongtin_BMP {
'\x04','\x40','\x00','\x00','\x10','\x40','\x10','\x10','\x10','\x00',
'\x04','\x40','\x3F','\xF8','\x10','\x20','\x08','\x20','\x11','\xFC',
'\x04','\x40','\x21','\x08','\x13','\xFE','\x04','\x40','\x10','\x08',
'\xFC','\x7E','\x21','\x08','\x16','\x02','\x00','\x00','\x10','\x10',
'\x04','\x40','\x21','\x08','\x5C','\x04','\x1F','\xF0','\x54','\x30',
'\x04','\x40','\x3F','\xF8','\x51','\xF8','\x10','\x10','\x58','\x48',
'\x04','\x40','\x21','\x08','\x50','\x00','\x10','\x10','\x50','\x84',
'\x7C','\x7C','\x21','\x08','\x90','\x00','\x10','\x10','\x93','\x02',
'\x04','\x40','\x21','\x08','\x13','\xFE','\x1F','\xF0','\x10','\x00',
'\x04','\x40','\x3F','\xF8','\x10','\x90','\x10','\x10','\x11','\xFC',
'\x04','\x40','\x21','\x08','\x10','\x90','\x01','\x00','\x10','\x20',
'\x04','\x40','\x01','\x00','\x28','\x90','\x08','\x84','\x28','\x20',
'\xFC','\x7E','\x01','\x00','\x25','\x12','\x48','\x92','\x24','\x20',
'\x04','\x40','\x01','\x00','\x41','\x12','\x48','\x12','\x44','\x20',
'\x04','\x40','\x01','\x00','\x42','\x0E','\x87','\xF0','\x43','\xFE',
'\x04','\x40','\x01','\x00','\x84','\x00','\x00','\x00','\x80','\x00'
};
//苯
xdata ben_BMP {
'\x08','\x20',
'\x08','\x20',
'\xFF','\xFE',
'\x08','\x20',
'\x01','\x00',
'\x01','\x00',
'\x7F','\xFC',
'\x03','\x80',
'\x05','\x40',
'\x09','\x20',
'\x11','\x10',
'\x2F','\xE8',
'\xC1','\x06',
'\x01','\x00',
'\x01','\x00',
'\x01','\x00'
};
//乙苯
xdata yiben_BMP {
'\x00','\x00','\x08','\x20',
'\x7F','\xF0','\x08','\x20',
'\x00','\x20','\xFF','\xFE',
'\x00','\x40','\x08','\x20',
'\x00','\x80','\x01','\x00',
'\x01','\x00','\x01','\x00',
'\x02','\x00','\x7F','\xFC',
'\x04','\x00','\x03','\x80',
'\x08','\x00','\x05','\x40',
'\x10','\x00','\x09','\x20',
'\x10','\x00','\x11','\x10',
'\x20','\x04','\x2F','\xE8',
'\x20','\x04','\xC1','\x06',
'\x20','\x04','\x01','\x00',
'\x1F','\xFC','\x01','\x00',
'\x00','\x00','\x01','\x00'
};
//邻
xdata lin_BMP {
'\x08','\x00',
'\x08','\x7C',
'\x14','\x44',
'\x12','\x48',
'\x21','\x48',
'\x48','\xD0',
'\x84','\x48',
'\x04','\x48',
'\x7F','\x44',
'\x01','\x44',
'\x22','\x44',
'\x14','\x68',
'\x08','\x50',
'\x04','\x40',
'\x04','\x40',
'\x00','\x40'
};
//间
xdata jian_BMP {
'\x20','\x00',
'\x13','\xFC',
'\x10','\x04',
'\x40','\x04',
'\x47','\xC4',
'\x44','\x44',
'\x44','\x44',
'\x44','\x44',
'\x47','\xC4',
'\x44','\x44',
'\x44','\x44',
'\x44','\x44',
'\x47','\xC4',
'\x40','\x04',
'\x40','\x14',
'\x40','\x08'
};
//对
xdata dui_BMP {
'\x00','\x10',
'\x00','\x10',
'\x00','\x10',
'\x7E','\x10',
'\x02','\xFE',
'\x02','\x10',
'\x24','\x10',
'\x14','\x90',
'\x08','\x50',
'\x08','\x50',
'\x14','\x10',
'\x12','\x10',
'\x22','\x10',
'\x40','\x10',
'\x00','\x50',
'\x00','\x20'
};

#define __________DALIANHAOHAISHUI__________
#elif (DALIANHAOHAISHUI == 1)

const char *const PolCode2017[] =
{
//以下是废水污染物参数，共计34个
    /*污水 B01**pH值 001**色度 002**悬浮物 003**五日生化需氧量 010*/
    "w00000", "w01001", "w01002", "w01012", "w01017",
    /*化学需氧量 011**总有机碳 015**总汞 020**烷基汞 021**总镉 022*/
    "w01018", "w01020", "w20111", "w20113", "w20115",
    /*总铬 023**六价铬 024**三价铬 025**总砷 026**总铅 027*/
    "w20116", "w20117", "025", "w20119", "w20120",
    /*总镍 028**总铜 029**总锌 030**总锰 031**总铁 032*/
    "w20121", "w20122", "w20123", "w20124", "w20125",
    /*总银 033**总铍 034**总硒 035**锡 036**硼 037*/
    "w20126", "w20127", "w20128", "w20092", "w20023",
    /*钼 038**钡 039**钴 040**氟化物 072**氨氮 060*/
    "w20061", "w20012", "w20038", "w21017", "w21003",
    /*有机氮 061**总氮 065**石油类 080**总磷 101*/
    "w99001", "w21001", "w22001", "w21011",
//以下是废气污染物参数，共计46个
    /*废气 B02**烟尘 01**二氧化硫 02**氮氧化物 03**一氧化碳 04*/
    "a00000", "a34013", "a21026", "a21002", "a21005",
    /*硫化氢 05**氟化物 06**氰化物 07**氯化氢 08**沥青烟 09*/
    "a21028", "a21018", "a21017", "a21024", "a34038",
    /*氨(氨气) 10**氯气 11**二硫化碳 12**硫醇 13**硫酸雾 14*/
    "a21001", "a21022", "a99051", "a30022", "a34039",
    /*铬酸雾 15**苯系物 16**甲苯 17**二甲苯 18**甲醛 19*/
    "a34040", "16", "a25003", "a25005", "a31001",
    /*苯并[a]芘 20**苯胺类 21**硝基苯 22**氯苯 23**光气 24*/
    "a25044", "a26001", "a25023", "a25010", "a99049",
    /*碳氢化合物 25**乙醛 26**酚类 27**甲醇 28**氯乙烯 29*/
    "a24087", "a31002", "a23001", "a30001", "a24046",
    /*二氧化碳 30**汞及其化合物 31**铅及其化合物 32**镉及其化合物 33**锡及其化合物 34*/
    "a05001", "a20057", "a20043", "a20025", "a20091",
    /*镍及其化合物 35**铍及其化合物 36**林格曼黑度 37**氧气含量 S01**烟气流速 S02*/
    "a20063", "a20016", "a01010", "a19001", "a01011",
    /*烟气温度 S03**烟气动压 S04**烟气湿度 S05**制冷温度 S06**烟道截面积 S07*/
    "a01012", "a01017", "a01014", "a01015", "a01016",
    "a01013", /*烟气压力 S08*/
//以下是扩展的客户自定义参数，共计20个
    "NO1", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

const char *const PolCode[] =
{
    //以下是废水污染物参数，共计34个
    "B01", "001", "002", "003", "010", "011", "015", "020", "021", "022",
    "023", "024", "025", "026", "027", "028", "029", "030", "031", "032",
    "033", "034", "035", "036", "037", "038", "039", "040", "041", "060",
    "061", "065", "080", "101",
//以下是废气污染物参数，共计46个
    "B02", "01", "02", "03", "04", "05", "06", "07", "08", "09",
    "10",  "11", "12", "13", "14", "15", "16", "17", "18", "19",
    "20",  "21", "22", "23", "24", "25", "26", "27", "28", "29",
    "30",  "31", "32", "33", "34", "35", "36", "37", "S01", "S02",
    "S03", "S04", "S05", "S06", "S07", "S08",
//以下是扩展的客户自定义参数，共计20个
    "NO1", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

#define glDispCustom_00(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_01(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_02(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_03(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_04(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_05(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_06(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_07(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_08(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_09(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_10(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_11(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_12(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_13(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_14(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_15(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_16(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_17(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_18(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_19(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}

#define __________JAINGXIYIZHENG__________
#elif (JAINGXIYIZHENG == 1 || JIANGXIJIAHAOYONGSHENG == 1)

const char *const PolCode2017[] =
{
//以下是废水污染物参数，共计34个
    /*污水 B01**pH值 001**色度 002**悬浮物 003**五日生化需氧量 010*/
    "w00000", "w01001", "w01002", "w01012", "w01017",
    /*化学需氧量 011**总有机碳 015**总汞 020**烷基汞 021**总镉 022*/
    "w01018", "w01020", "w20111", "w20113", "w20115",
    /*总铬 023**六价铬 024**三价铬 025**总砷 026**总铅 027*/
    "w20116", "w20117", "025", "w20119", "w20120",
    /*总镍 028**总铜 029**总锌 030**总锰 031**总铁 032*/
    "w20121", "w20122", "w20123", "w20124", "w20125",
    /*总银 033**总铍 034**总硒 035**锡 036**硼 037*/
    "w20126", "w20127", "w20128", "w20092", "w20023",
    /*钼 038**钡 039**钴 040**氟化物 072**氨氮 060*/
    "w20061", "w20012", "w20038", "w21017", "w21003",
    /*有机氮 061**总氮 065**石油类 080**总磷 101*/
    "w99001", "w21001", "w22001", "w21011",
//以下是废气污染物参数，共计46个
    /*废气 B02**烟尘 01**二氧化硫 02**氮氧化物 03**一氧化碳 04*/
    "a00000", "a34013", "a21026", "a21002", "a21005",
    /*硫化氢 05**氟化物 06**氰化物 07**氯化氢 08**沥青烟 09*/
    "a21028", "a21018", "a21017", "a21024", "a34038",
    /*氨(氨气) 10**氯气 11**二硫化碳 12**硫醇 13**硫酸雾 14*/
    "a21001", "a21022", "a99051", "a30022", "a34039",
    /*铬酸雾 15**苯系物 16**甲苯 17**二甲苯 18**甲醛 19*/
    "a34040", "16", "a25003", "a25005", "a31001",
    /*苯并[a]芘 20**苯胺类 21**硝基苯 22**氯苯 23**光气 24*/
    "a25044", "a26001", "a25023", "a25010", "a99049",
    /*碳氢化合物 25**乙醛 26**酚类 27**甲醇 28**氯乙烯 29*/
    "a24087", "a31002", "a23001", "a30001", "a24046",
    /*二氧化碳 30**汞及其化合物 31**铅及其化合物 32**镉及其化合物 33**锡及其化合物 34*/
    "a05001", "a20057", "a20043", "a20025", "a20091",
    /*镍及其化合物 35**铍及其化合物 36**林格曼黑度 37**氧气含量 S01**烟气流速 S02*/
    "a20063", "a20016", "a01010", "a19001", "a01011",
    /*烟气温度 S03**烟气动压 S04**烟气湿度 S05**制冷温度 S06**烟道截面积 S07*/
    "a01012", "a01017", "a01014", "a01015", "a01016",
    "a01013", /*烟气压力 S08*/
//以下是扩展的客户自定义参数，共计20个
    "a05002", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

const char *const PolCode[] =
{
    //以下是废水污染物参数，共计34个
    "B01", "001", "002", "003", "010", "011", "015", "020", "021", "022",
    "023", "024", "025", "026", "027", "028", "029", "030", "031", "032",
    "033", "034", "035", "036", "037", "038", "039", "040", "041", "060",
    "061", "065", "080", "101",
//以下是废气污染物参数，共计46个
    "B02", "01", "02", "03", "04", "a21028", "06", "07", "08", "09",
    "a21001",  "11", "12", "13", "14", "15", "16", "17", "18", "19",
    "20",  "21", "22", "23", "24", "a24087", "26", "27", "28", "29",
    "30",  "31", "32", "33", "34", "35", "36", "37", "S01", "S02",
    "S03", "S04", "S05", "S06", "S07", "S08",
//以下是扩展的客户自定义参数，共计20个
    "a05002", "110", "070", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

#define glDispCustom_00(x, y)	{glXPutBitmap (x, y, 16*2, 16, jiawan_BMP);}
#define glDispCustom_01(x, y)	{glXPutBitmap (x, y, 16*3, 16, huifafen_BMP);}
#define glDispCustom_02(x, y)	{glXPutBitmap (x, y, 16*3, 16, qinghuawu_BMP);}
#define glDispCustom_03(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_04(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_05(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_06(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_07(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_08(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_09(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_10(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_11(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_12(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_13(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_14(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_15(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_16(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_17(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_18(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_19(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}

//甲烷
xdata jiawan_BMP {
'\x00','\x00','\x10','\x40',
'\x3F','\xF8','\x10','\x20',
'\x21','\x08','\x13','\xFE',
'\x21','\x08','\x16','\x02',
'\x21','\x08','\x5C','\x04',
'\x3F','\xF8','\x51','\xF8',
'\x21','\x08','\x50','\x00',
'\x21','\x08','\x90','\x00',
'\x21','\x08','\x13','\xFE',
'\x3F','\xF8','\x10','\x90',
'\x21','\x08','\x10','\x90',
'\x01','\x00','\x28','\x90',
'\x01','\x00','\x25','\x12',
'\x01','\x00','\x41','\x12',
'\x01','\x00','\x42','\x0E',
'\x01','\x00','\x84','\x00'
};
//挥发酚
xdata huifafen_BMP {
'\x10','\x00','\x01','\x00','\x00','\x08',
'\x13','\xFE','\x11','\x10','\xFE','\x28',
'\x12','\x02','\x11','\x08','\x28','\x28',
'\x14','\x44','\x22','\x00','\x28','\x28',
'\xFC','\x40','\x3F','\xFC','\xFE','\x44',
'\x13','\xFC','\x02','\x00','\xAA','\x44',
'\x10','\x80','\x04','\x00','\xAA','\x82',
'\x14','\xA0','\x07','\xF8','\xAB','\x7C',
'\x19','\x20','\x0A','\x08','\xAE','\x24',
'\x31','\xFC','\x09','\x08','\xC2','\x24',
'\xD0','\x20','\x11','\x10','\x82','\x24',
'\x10','\x20','\x10','\xA0','\xFE','\x24',
'\x17','\xFE','\x20','\x40','\x82','\x44',
'\x10','\x20','\x40','\xA0','\x82','\x44',
'\x50','\x20','\x03','\x18','\xFE','\x94',
'\x20','\x20','\x1C','\x06','\x83','\x08'
};
//氰化物
xdata qinghuawu_BMP {
'\x20','\x00','\x08','\x80','\x10','\x80',
'\x3F','\xFC','\x08','\x80','\x10','\x80',
'\x40','\x00','\x08','\x84','\x50','\x80',
'\x9F','\xF0','\x10','\x88','\x50','\xFC',
'\x00','\x00','\x10','\x90','\x7D','\x54',
'\x7F','\xF0','\x30','\xA0','\x52','\x54',
'\x04','\x10','\x30','\xC0','\x90','\x54',
'\x7F','\xD0','\x50','\x80','\x10','\x94',
'\x04','\x10','\x91','\x80','\x1C','\x94',
'\x3F','\x90','\x12','\x80','\xF1','\x24',
'\x04','\x10','\x14','\x80','\x52','\x24',
'\xFF','\xF2','\x10','\x82','\x10','\x44',
'\x20','\x8A','\x10','\x82','\x10','\x44',
'\x3F','\x8A','\x10','\x82','\x10','\x84',
'\x20','\x86','\x10','\x7E','\x11','\x28',
'\x21','\x82','\x10','\x00','\x10','\x10'
};

#define __________NANJINGHONGKAI__________
#elif (NANJINGHONGKAI == 1)


const char *const PolCode2017[] =
{
//以下是废水污染物参数，共计34个
    /*污水 B01**pH值 001**色度 002**悬浮物 003**五日生化需氧量 010*/
    "w00000", "w01001", "w01002", "w01012", "w01017",
    /*化学需氧量 011**总有机碳 015**总汞 020**烷基汞 021**总镉 022*/
    "w01018", "w01020", "w20111", "w20113", "w20115",
    /*总铬 023**六价铬 024**三价铬 025**总砷 026**总铅 027*/
    "w20116", "w20117", "025", "w20119", "w20120",
    /*总镍 028**总铜 029**总锌 030**总锰 031**总铁 032*/
    "w20121", "w20122", "w20123", "w20124", "w20125",
    /*总银 033**总铍 034**总硒 035**锡 036**硼 037*/
    "w20126", "w20127", "w20128", "w20092", "w20023",
    /*钼 038**钡 039**钴 040**氟化物 072**氨氮 060*/
    "w20061", "w20012", "w20038", "w21017", "w21003",
    /*有机氮 061**总氮 065**石油类 080**总磷 101*/
    "w99001", "w21001", "w22001", "w21011",
//以下是废气污染物参数，共计46个
    /*废气 B02**烟尘 01**二氧化硫 02**氮氧化物 03**一氧化碳 04*/
    "rate", "a34013", "a21026", "a21002", "a21005",
    /*硫化氢 05**氟化物 06**氰化物 07**氯化氢 08**沥青烟 09*/
    "a21028", "a21018", "a21017", "a21024", "a34038",
    /*氨(氨气) 10**氯气 11**二硫化碳 12**硫醇 13**硫酸雾 14*/
    "a21001", "a21022", "a99051", "a30022", "a34039",
    /*铬酸雾 15**苯系物 16**甲苯 17**二甲苯 18**甲醛 19*/
    "a34040", "16", "a25003", "a25005", "a31001",
    /*苯并[a]芘 20**苯胺类 21**硝基苯 22**氯苯 23**光气 24*/
    "a25044", "a26001", "a25023", "a25010", "a99049",
    /*碳氢化合物 25**乙醛 26**酚类 27**甲醇 28**氯乙烯 29*/
    "a24087", "a31002", "a23001", "a30001", "a24046",
    /*二氧化碳 30**汞及其化合物 31**铅及其化合物 32**镉及其化合物 33**锡及其化合物 34*/
    "a05001", "a20057", "a20043", "a20025", "a20091",
    /*镍及其化合物 35**铍及其化合物 36**林格曼黑度 37**氧气含量 S01**烟气流速 S02*/
    "a20063", "a20016", "a01010", "a19001", "a01011",
    /*烟气温度 S03**烟气动压 S04**烟气湿度 S05**制冷温度 S06**烟道截面积 S07*/
    "a01012", "a01017", "a01014", "a01015", "a01016",
    "a01013", /*烟气压力 S08*/
//以下是扩展的客户自定义参数，共计20个
    "a99054ppm", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

const char *const PolCode[] =
{
    //以下是废水污染物参数，共计34个
    "B01", "001", "002", "003", "010", "011", "015", "020", "021", "022",
    "023", "024", "025", "026", "027", "028", "029", "030", "031", "032",
    "033", "034", "035", "036", "037", "038", "039", "040", "041", "060",
    "061", "065", "080", "101",
//以下是废气污染物参数，共计46个
    "B02", "01", "02", "03", "04", "05", "06", "07", "08", "09",
    "10",  "11", "12", "13", "14", "15", "16", "17", "18", "19",
    "20",  "21", "22", "23", "24", "25", "26", "27", "28", "29",
    "30",  "31", "32", "33", "34", "35", "36", "37", "S01", "S02",
    "S03", "S04", "S05", "S06", "S07", "S08",
//以下是扩展的客户自定义参数，共计20个
    "98", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};


#define glDispCustom_00(x, y)	{glPrintf(x, y, &fi12x16, "TVOC");}
#define glDispCustom_01(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_02(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_03(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_04(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_05(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_06(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_07(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_08(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_09(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_10(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_11(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_12(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_13(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_14(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_15(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_16(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_17(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_18(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_19(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}


//流量
xdata liuliang_BMP {
'\x00','\x80','\x00','\x00',
'\x20','\x40','\x1F','\xF0',
'\x17','\xFE','\x10','\x10',
'\x10','\x80','\x1F','\xF0',
'\x81','\x10','\x10','\x10',
'\x42','\x08','\xFF','\xFE',
'\x47','\xFC','\x00','\x00',
'\x10','\x04','\x1F','\xF0',
'\x10','\x00','\x11','\x10',
'\x22','\x48','\x1F','\xF0',
'\xE2','\x48','\x11','\x10',
'\x22','\x48','\x1F','\xF0',
'\x22','\x48','\x01','\x00',
'\x22','\x4A','\x1F','\xF0',
'\x24','\x4A','\x01','\x00',
'\x08','\x46','\x7F','\xFC'
};

#define __________SUZHOUWEISHUI__________
#elif (SUZHOUWEISHUI == 1 || JIANGXIBOYUAN == 1)

const char *const PolCode2017[] =
{
//以下是废水污染物参数，共计34个
    /*污水 B01**pH值 001**色度 002**悬浮物 003**五日生化需氧量 010*/
    "w00000", "w01001", "w01002", "w01012", "w01017",
    /*化学需氧量 011**总有机碳 015**总汞 020**烷基汞 021**总镉 022*/
    "w01018", "w01020", "w20111", "w20113", "w20115",
    /*总铬 023**六价铬 024**三价铬 025**总砷 026**总铅 027*/
    "w20116", "w20117", "025", "w20119", "w20120",
    /*总镍 028**总铜 029**总锌 030**总锰 031**总铁 032*/
    "w20121", "w20122", "w20123", "w20124", "w20125",
    /*总银 033**总铍 034**总硒 035**锡 036**硼 037*/
    "w20126", "w20127", "w20128", "w20092", "w20023",
    /*钼 038**钡 039**钴 040**氟化物 072**氨氮 060*/
    "w20061", "w20012", "w20038", "w21017", "w21003",
    /*有机氮 061**总氮 065**石油类 080**总磷 101*/
    "w99001", "w21001", "w22001", "w21011",
//以下是废气污染物参数，共计46个
    /*废气 B02**烟尘 01**二氧化硫 02**氮氧化物 03**一氧化碳 04*/
    "a00000", "a34013", "a21026", "a21002", "a21005",
    /*硫化氢 05**氟化物 06**氰化物 07**氯化氢 08**沥青烟 09*/
    "a21028", "a21018", "a21017", "a21024", "a34038",
    /*氨(氨气) 10**氯气 11**二硫化碳 12**硫醇 13**硫酸雾 14*/
    "a21001", "a21022", "a99051", "a30022", "a34039",
    /*铬酸雾 15**苯系物 16**甲苯 17**二甲苯 18**甲醛 19*/
    "a34040", "16", "a25003", "a25005", "a31001",
    /*苯并[a]芘 20**苯胺类 21**硝基苯 22**氯苯 23**光气 24*/
    "a25044", "a26001", "a25023", "a25010", "a99049",
    /*碳氢化合物 25**乙醛 26**酚类 27**甲醇 28**氯乙烯 29*/
    "a24087", "a31002", "a23001", "a30001", "a24046",
    /*二氧化碳 30**汞及其化合物 31**铅及其化合物 32**镉及其化合物 33**锡及其化合物 34*/
    "a05001", "a20057", "a20043", "a20025", "a20091",
    /*镍及其化合物 35**铍及其化合物 36**林格曼黑度 37**氧气含量 S01**烟气流速 S02*/
    "a20063", "a20016", "a01010", "a19001", "a01011",
    /*烟气温度 S03**烟气动压 S04**烟气湿度 S05**制冷温度 S06**烟道截面积 S07*/
    "a01012", "a01017", "a01014", "a01015", "a01016",
    "a01013", /*烟气压力 S08*/
//以下是扩展的客户自定义参数，共计20个
    "042", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

const char *const PolCode[] =
{
    //以下是废水污染物参数，共计34个
    "B01", "001", "002", "003", "010", "011", "015", "020", "021", "022",
    "023", "024", "025", "026", "027", "028", "029", "030", "031", "032",
    "033", "034", "035", "036", "037", "038", "039", "040", "041", "060",
    "061", "065", "080", "101",
//以下是废气污染物参数，共计46个
    "B02", "01", "02", "03", "04", "05", "06", "07", "08", "09",
    "10",  "11", "12", "13", "14", "15", "16", "17", "18", "19",
    "20",  "21", "22", "23", "24", "25", "26", "27", "28", "29",
    "30",  "31", "32", "33", "34", "35", "36", "37", "S01", "S02",
    "S03", "S04", "S05", "S06", "S07", "S08",
//以下是扩展的客户自定义参数，共计20个
    "042", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

#define glDispCustom_00(x, y)	{glXPutBitmap (x, y, 16*2, 16, yushui_BMP);}{glXPutBitmap (x+16*2, y, 15, 16, BoconGee_bmp);}
#define glDispCustom_01(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_02(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_03(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_04(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_05(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_06(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_07(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_08(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_09(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_10(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_11(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_12(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_13(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_14(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_15(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_16(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_17(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_18(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_19(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}

//雨水
xdata yushui_BMP {
'\x00','\x00','\x01','\x00',
'\xFF','\xFE','\x01','\x00',
'\x01','\x00','\x01','\x00',
'\x01','\x00','\x01','\x08',
'\x01','\x00','\x01','\x08',
'\x7F','\xFC','\x7D','\x90',
'\x41','\x04','\x05','\xA0',
'\x41','\x04','\x09','\x40',
'\x49','\x44','\x09','\x40',
'\x45','\x24','\x11','\x20',
'\x41','\x04','\x11','\x10',
'\x49','\x44','\x21','\x08',
'\x45','\x24','\x41','\x06',
'\x41','\x04','\x81','\x00',
'\x41','\x14','\x05','\x00',
'\x40','\x08','\x02','\x00'
};
//流量
xdata liuliang_BMP {
'\x00','\x80','\x00','\x00',
'\x20','\x40','\x1F','\xF0',
'\x17','\xFE','\x10','\x10',
'\x10','\x80','\x1F','\xF0',
'\x81','\x10','\x10','\x10',
'\x42','\x08','\xFF','\xFE',
'\x47','\xFC','\x00','\x00',
'\x10','\x04','\x1F','\xF0',
'\x10','\x00','\x11','\x10',
'\x22','\x48','\x1F','\xF0',
'\xE2','\x48','\x11','\x10',
'\x22','\x48','\x1F','\xF0',
'\x22','\x48','\x01','\x00',
'\x22','\x4A','\x1F','\xF0',
'\x24','\x4A','\x01','\x00',
'\x08','\x46','\x7F','\xFC'
};

#define __________HUNANTUOAN__________
#elif (HUNANTUOAN == 1)

const char *const PolCode2017[] =
{
//以下是废水污染物参数，共计34个
    /*污水 B01**pH值 001**色度 002**悬浮物 003**五日生化需氧量 010*/
    "w00000", "w01001", "w01002", "w01012", "w01017",
    /*化学需氧量 011**总有机碳 015**总汞 020**烷基汞 021**总镉 022*/
    "w01018", "w01020", "w20111", "w20113", "w20115",
    /*总铬 023**六价铬 024**三价铬 025**总砷 026**总铅 027*/
    "w20116", "w20117", "025", "w20119", "w20120",
    /*总镍 028**总铜 029**总锌 030**总锰 031**总铁 032*/
    "w20121", "w20122", "w20123", "w20124", "w20125",
    /*总银 033**总铍 034**总硒 035**锡 036**硼 037*/
    "w20126", "w20127", "w20128", "w20092", "w20023",
    /*钼 038**钡 039**钴 040**氟化物 072**氨氮 060*/
    "w20061", "w20012", "w20038", "w21017", "w21003",
    /*有机氮 061**总氮 065**石油类 080**总磷 101*/
    "w99001", "w21001", "w22001", "w21011",
//以下是废气污染物参数，共计46个
    /*废气 B02**烟尘 01**二氧化硫 02**氮氧化物 03**一氧化碳 04*/
    "a00000", "a34013", "a21026", "a21002", "a21005",
    /*硫化氢 05**氟化物 06**氰化物 07**氯化氢 08**沥青烟 09*/
    "a21028", "a21018", "a21017", "a21024", "a34038",
    /*氨(氨气) 10**氯气 11**二硫化碳 12**硫醇 13**硫酸雾 14*/
    "a21001", "a21022", "a99051", "a30022", "a34039",
    /*铬酸雾 15**苯系物 16**甲苯 17**二甲苯 18**甲醛 19*/
    "a34040", "16", "a25003", "a25005", "a31001",
    /*苯并[a]芘 20**苯胺类 21**硝基苯 22**氯苯 23**光气 24*/
    "a25044", "a26001", "a25023", "a25010", "a99049",
    /*碳氢化合物 25**乙醛 26**酚类 27**甲醇 28**氯乙烯 29*/
    "a24087", "a31002", "a23001", "a30001", "a24046",
    /*二氧化碳 30**汞及其化合物 31**铅及其化合物 32**镉及其化合物 33**锡及其化合物 34*/
    "a05001", "a20057", "a20043", "a20025", "a20091",
    /*镍及其化合物 35**铍及其化合物 36**林格曼黑度 37**氧气含量 S01**烟气流速 S02*/
    "a20063", "a20016", "a01010", "a19001", "a01011",
    /*烟气温度 S03**烟气动压 S04**烟气湿度 S05**制冷温度 S06**烟道截面积 S07*/
    "a01012", "a01017", "a01014", "a01015", "a01016",
    "a01013", /*烟气压力 S08*/
//以下是扩展的客户自定义参数，共计20个
    "042", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

const char *const PolCode[] =
{
    //以下是废水污染物参数，共计34个
    "B01", "001", "002", "003", "010", "011", "015", "020", "021", "022",
    "023", "024", "025", "026", "027", "028", "029", "030", "031", "032",
    "033", "034", "035", "036", "037", "038", "039", "040", "041", "060",
    "061", "065", "080", "101",
//以下是废气污染物参数，共计46个
    "B02", "01", "02", "03", "04", "05", "06", "07", "08", "09",
    "10",  "11", "12", "13", "14", "15", "16", "17", "18", "19",
    "20",  "21", "22", "23", "24", "25", "26", "27", "28", "29",
    "30",  "31", "32", "33", "34", "35", "36", "37", "S01", "S02",
    "S03", "S04", "S05", "S06", "S07", "S08",
//以下是扩展的客户自定义参数，共计20个
    "VOC1", "VOC2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

#define glDispCustom_00(x, y)	{glPrintf(x, y, &fi12x16, "VOC1");}
#define glDispCustom_01(x, y)	{glPrintf(x, y, &fi12x16, "VOC2");}
#define glDispCustom_02(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_03(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_04(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_05(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_06(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_07(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_08(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_09(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_10(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_11(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_12(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_13(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_14(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_15(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_16(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_17(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_18(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_19(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}


#define __________XICHANGSANFENG__________
#elif (XICHANGSANFENG == 1)

const char *const PolCode2017[] =
{
//以下是废水污染物参数，共计34个
    /*污水 B01**pH值 001**色度 002**悬浮物 003**五日生化需氧量 010*/
    "w00000", "w01001", "w01002", "w01012", "w01017",
    /*化学需氧量 011**总有机碳 015**总汞 020**烷基汞 021**总镉 022*/
    "w01018", "w01020", "w20111", "w20113", "w20115",
    /*总铬 023**六价铬 024**三价铬 025**总砷 026**总铅 027*/
    "w20116", "w20117", "025", "w20119", "w20120",
    /*总镍 028**总铜 029**总锌 030**总锰 031**总铁 032*/
    "w20121", "w20122", "w20123", "w20124", "w20125",
    /*总银 033**总铍 034**总硒 035**锡 036**硼 037*/
    "w20126", "w20127", "w20128", "w20092", "w20023",
    /*钼 038**钡 039**钴 040**氟化物 072**氨氮 060*/
    "w20061", "w20012", "w20038", "w21017", "w21003",
    /*有机氮 061**总氮 065**石油类 080**总磷 101*/
    "w99001", "w21001", "w22001", "w21011",
//以下是废气污染物参数，共计46个
    /*废气 B02**烟尘 01**二氧化硫 02**氮氧化物 03**一氧化碳 04*/
    "a00000", "a34013", "a21026", "a21002", "a21005",
    /*硫化氢 05**氟化物 06**氰化物 07**氯化氢 08**沥青烟 09*/
    "a21028", "a21018", "a21017", "a21024", "a34038",
    /*氨(氨气) 10**氯气 11**二硫化碳 12**硫醇 13**硫酸雾 14*/
    "a21001", "a21022", "a99051", "a30022", "a34039",
    /*铬酸雾 15**苯系物 16**甲苯 17**二甲苯 18**甲醛 19*/
    "a34040", "16", "a25003", "a25005", "a31001",
    /*苯并[a]芘 20**苯胺类 21**硝基苯 22**氯苯 23**光气 24*/
    "a25044", "a26001", "a25023", "a25010", "a99049",
    /*碳氢化合物 25**乙醛 26**酚类 27**甲醇 28**氯乙烯 29*/
    "a24087", "a31002", "a23001", "a30001", "a24046",
    /*二氧化碳 30**汞及其化合物 31**铅及其化合物 32**镉及其化合物 33**锡及其化合物 34*/
    "a05001", "a20057", "a20043", "a20025", "a20091",
    /*镍及其化合物 35**铍及其化合物 36**林格曼黑度 37**氧气含量 S01**烟气流速 S02*/
    "a20063", "a20016", "a01010", "a19001", "a01011",
    /*烟气温度 S03**烟气动压 S04**烟气湿度 S05**制冷温度 S06**烟道截面积 S07*/
    "a01012", "a01017", "a01014", "a01015", "a01016",
    "a01013", /*烟气压力 S08*/
//以下是扩展的客户自定义参数，共计20个
    "NO1", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

const char *const PolCode[] =
{
    //以下是废水污染物参数，共计34个
    "B01", "001", "002", "003", "010", "011", "015", "020", "021", "022",
    "023", "024", "025", "026", "027", "028", "029", "030", "031", "032",
    "033", "034", "035", "036", "037", "038", "039", "040", "041", "060",
    "061", "065", "080", "101",
//以下是废气污染物参数，共计46个
    "B02", "01", "02", "03", "04", "05", "06", "07", "08", "09",
    "10",  "11", "12", "13", "14", "15", "16", "17", "18", "19",
    "20",  "21", "22", "23", "24", "25", "26", "27", "28", "29",
    "30",  "31", "32", "33", "34", "35", "36", "37", "S01", "S02",
    "S03", "S04", "S05", "S06", "S07", "S08",
//以下是扩展的客户自定义参数，共计20个
    "NO1", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

#define glDispCustom_00(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_01(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_02(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_03(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_04(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_05(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_06(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_07(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_08(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_09(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_10(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_11(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_12(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_13(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_14(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_15(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_16(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_17(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_18(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_19(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
//状态
// Bitmap : zhuangtai_BMP
// Buffer Size : 64
// Monochrome  : Black Foreground, White Background
// Mode   : Landscape
// Height : 16 pixels.
// Width  : 32 pixels.
// Init   : glXPutBitmap (leftedge,topedge,32,16,zhuangtai_BMP);

xdata zhuangtai_BMP {
'\x08','\x40','\x01','\x00',
'\x08','\x48','\x01','\x00',
'\x08','\x44','\x7F','\xFC',
'\x48','\x44','\x01','\x00',
'\x28','\x40','\x02','\x80',
'\x2F','\xFE','\x04','\x40',
'\x08','\x40','\x0A','\x20',
'\x08','\x40','\x31','\x18',
'\x18','\x40','\xC0','\x06',
'\x28','\xA0','\x01','\x00',
'\xC8','\xA0','\x08','\x88',
'\x08','\x90','\x48','\x84',
'\x09','\x10','\x48','\x12',
'\x09','\x08','\x48','\x12',
'\x0A','\x04','\x87','\xF0',
'\x0C','\x02','\x00','\x00'
};


#define __________GUANGZHOUBIYUAN__________
#elif (GUANGZHOUBIYUAN == 1)
const char *const PolCode2017[] =
{
//以下是废水污染物参数，共计34个
    /*污水 B01**pH值 001**色度 002**悬浮物 003**五日生化需氧量 010*/
    "w00000", "w01001", "w01002", "w01012", "w01017",
    /*化学需氧量 011**总有机碳 015**总汞 020**烷基汞 021**总镉 022*/
    "w01018", "w01020", "w20111", "w20113", "w20115",
    /*总铬 023**六价铬 024**三价铬 025**总砷 026**总铅 027*/
    "w20116", "w20117", "025", "w20119", "w20120",
    /*总镍 028**总铜 029**总锌 030**总锰 031**总铁 032*/
    "w20121", "w20122", "w20123", "w20124", "w20125",
    /*总银 033**总铍 034**总硒 035**锡 036**硼 037*/
    "w20126", "w20127", "w20128", "w20092", "w20023",
    /*钼 038**钡 039**钴 040**氟化物 072**氨氮 060*/
    "w20061", "w20012", "w20038", "w21017", "w21003",
    /*有机氮 061**总氮 065**石油类 080**总磷 101*/
    "w99001", "w21001", "w22001", "w21011",
//以下是废气污染物参数，共计46个
    /*废气 B02**烟尘 01**二氧化硫 02**氮氧化物 03**一氧化碳 04*/
    "a00000", "a34013", "a21026", "a21002", "a21005",
    /*硫化氢 05**氟化物 06**氰化物 07**氯化氢 08**沥青烟 09*/
    "a21028", "a21018", "a21017", "a21024", "a34038",
    /*氨(氨气) 10**氯气 11**二硫化碳 12**硫醇 13**硫酸雾 14*/
    "a21001", "a21022", "a99051", "a30022", "a34039",
    /*铬酸雾 15**苯系物 16**甲苯 17**二甲苯 18**甲醛 19*/
    "a34040", "16", "a25003", "a25005", "a31001",
    /*苯并[a]芘 20**苯胺类 21**硝基苯 22**氯苯 23**光气 24*/
    "a25044", "a26001", "a25023", "a25010", "a99049",
    /*碳氢化合物 25**乙醛 26**酚类 27**甲醇 28**氯乙烯 29*/
    "a24087", "a31002", "a23001", "a30001", "a24046",
    /*二氧化碳 30**汞及其化合物 31**铅及其化合物 32**镉及其化合物 33**锡及其化合物 34*/
    "a05001", "a20057", "a20043", "a20025", "a20091",
    /*镍及其化合物 35**铍及其化合物 36**林格曼黑度 37**氧气含量 S01**烟气流速 S02*/
    "a20063", "a20016", "a01010", "a19001", "a01011",
    /*烟气温度 S03**烟气动压 S04**烟气湿度 S05**制冷温度 S06**烟道截面积 S07*/
    "a01012", "a01017", "a01014", "a01015", "a01016",
    "a01013", /*烟气压力 S08*/
//以下是扩展的客户自定义参数，共计20个
    "NO1", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

const char *const PolCode[] =
{
    //以下是废水污染物参数，共计34个
    "B01", "001", "002", "003", "010", "011", "015", "020", "021", "022",
    "023", "024", "025", "026", "027", "028", "029", "030", "031", "032",
    "033", "034", "035", "036", "037", "038", "039", "040", "041", "060",
    "061", "065", "080", "101",
//以下是废气污染物参数，共计46个
    "B02", "01", "02", "03", "04", "05", "06", "07", "08", "09",
    "10",  "11", "12", "13", "14", "15", "16", "17", "18", "19",
    "20",  "21", "22", "23", "24", "25", "26", "27", "28", "29",
    "30",  "31", "32", "33", "34", "35", "36", "37", "S01", "S02",
    "S03", "S04", "S05", "S06", "S07", "S08",
//以下是扩展的客户自定义参数，共计20个
    "YL", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

#define glDispCustom_00(x, y)	{glXPutBitmap (x, y, 16*4, 16, shishiyuliang_BMP);}
#define glDispCustom_01(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_02(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_03(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_04(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_05(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_06(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_07(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_08(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_09(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_10(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_11(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_12(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_13(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_14(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_15(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_16(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_17(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_18(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_19(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}

//实时雨量
xdata shishiyuliang_BMP {
'\x02','\x00','\x00','\x08','\x00','\x00','\x00','\x00',
'\x01','\x00','\x00','\x08','\xFF','\xFE','\x1F','\xF0',
'\x7F','\xFE','\x7C','\x08','\x01','\x00','\x10','\x10',
'\x40','\x02','\x44','\x08','\x01','\x00','\x1F','\xF0',
'\x88','\x84','\x45','\xFE','\x01','\x00','\x10','\x10',
'\x04','\x80','\x44','\x08','\x7F','\xFC','\xFF','\xFE',
'\x04','\x80','\x44','\x08','\x41','\x04','\x00','\x00',
'\x10','\x80','\x7C','\x08','\x41','\x04','\x1F','\xF0',
'\x08','\x80','\x44','\x88','\x49','\x44','\x11','\x10',
'\x08','\x80','\x44','\x48','\x45','\x24','\x1F','\xF0',
'\xFF','\xFE','\x44','\x48','\x41','\x04','\x11','\x10',
'\x01','\x40','\x44','\x08','\x49','\x44','\x1F','\xF0',
'\x02','\x20','\x7C','\x08','\x45','\x24','\x01','\x00',
'\x04','\x10','\x44','\x08','\x41','\x04','\x1F','\xF0',
'\x18','\x08','\x00','\x28','\x41','\x14','\x01','\x00',
'\x60','\x04','\x00','\x10','\x40','\x08','\x7F','\xFC'
};

#elif (QINGDAOLUBO == 1)
const char *const PolCode2017[] =
{
//以下是废水污染物参数，共计34个
    /*污水 B01**pH值 001**色度 002**悬浮物 003**五日生化需氧量 010*/
    "w00000", "w01001", "w01002", "w01012", "w01017",
    /*化学需氧量 011**总有机碳 015**总汞 020**烷基汞 021**总镉 022*/
    "w01018", "w01020", "w20111", "w20113", "w20115",
    /*总铬 023**六价铬 024**三价铬 025**总砷 026**总铅 027*/
    "w20116", "w20117", "025", "w20119", "w20120",
    /*总镍 028**总铜 029**总锌 030**总锰 031**总铁 032*/
    "w20121", "w20122", "w20123", "w20124", "w20125",
    /*总银 033**总铍 034**总硒 035**锡 036**硼 037*/
    "w20126", "w20127", "w20128", "w20092", "w20023",
    /*钼 038**钡 039**钴 040**氟化物 072**氨氮 060*/
    "w20061", "w20012", "w20038", "w21017", "w21003",
    /*有机氮 061**总氮 065**石油类 080**总磷 101*/
    "w99001", "w21001", "w22001", "w21011",
//以下是废气污染物参数，共计46个
    /*废气 B02**烟尘 01**二氧化硫 02**氮氧化物 03**一氧化碳 04*/
    "a00000", "a34013", "a21026", "a21002", "a21005",
    /*硫化氢 05**氟化物 06**氰化物 07**氯化氢 08**沥青烟 09*/
    "a21028", "a21018", "a21017", "a21024", "a34038",
    /*氨(氨气) 10**氯气 11**二硫化碳 12**硫醇 13**硫酸雾 14*/
    "a21001", "a21022", "a99051", "a30022", "a34039",
    /*铬酸雾 15**苯系物 16**甲苯 17**二甲苯 18**甲醛 19*/
    "a34040", "16", "a25003", "a25005", "a31001",
    /*苯并[a]芘 20**苯胺类 21**硝基苯 22**氯苯 23**光气 24*/
    "a25044", "a26001", "a25023", "a25010", "a99049",
    /*碳氢化合物 25**乙醛 26**酚类 27**甲醇 28**氯乙烯 29*/
    "a24087", "a31002", "a23001", "a30001", "a24046",
    /*二氧化碳 30**汞及其化合物 31**铅及其化合物 32**镉及其化合物 33**锡及其化合物 34*/
    "a05001", "a20057", "a20043", "a20025", "a20091",
    /*镍及其化合物 35**铍及其化合物 36**林格曼黑度 37**氧气含量 S01**烟气流速 S02*/
    "a20063", "a20016", "a01010", "a19001", "a01011",
    /*烟气温度 S03**烟气动压 S04**烟气湿度 S05**制冷温度 S06**烟道截面积 S07*/
    "a01012", "a01017", "a01014", "a01015", "a01016",
    "a01013", /*烟气压力 S08*/
//以下是扩展的客户自定义参数，共计20个
    "a24088", "a24087", "a31024", "avoc01", "avoc02", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

const char *const PolCode[] =
{
    //以下是废水污染物参数，共计34个
    "B01", "001", "002", "003", "010", "011", "015", "020", "021", "022",
    "023", "024", "025", "026", "027", "028", "029", "030", "031", "032",
    "033", "034", "035", "036", "037", "038", "039", "040", "041", "060",
    "061", "065", "080", "101",
//以下是废气污染物参数，共计46个
    "B02", "01", "02", "03", "04", "05", "06", "07", "08", "09",
    "10",  "11", "12", "13", "14", "15", "a25002", "a25003", "a25005", "19",
    "20",  "21", "22", "23", "24", "25", "26", "a23001", "28", "29",
    "30",  "31", "32", "33", "34", "35", "36", "37", "S01", "S02",
    "S03", "S04", "S05", "S06", "S07", "S08",
//以下是扩展的客户自定义参数，共计20个
    "a24088", "a24087", "a31024", "avoc01", "avoc02", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

#define glDispCustom_00(x, y)	{glXPutBitmap (x, y, 16*5, 16, feijiawanzongtin_BMP);}
#define glDispCustom_01(x, y)	{glXPutBitmap (x, y, 16*5, 16, tanqinghuahewu_BMP);}
#define glDispCustom_02(x, y)	{glXPutBitmap (x, y, 16*2, 16, bingtong_BMP);}
#define glDispCustom_03(x, y)	{glXPutBitmap (x, y, 16*4, 16, WeiZhiVOCs_BMP);}
#define glDispCustom_04(x, y)	{glXPutBitmap (x, y, 16*2, 16, VOCs_BMP);}
#define glDispCustom_05(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_06(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_07(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_08(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_09(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_10(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_11(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_12(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_13(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_14(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_15(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_16(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_17(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_18(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_19(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}

xdata tanqinghuahewu_BMP {
'\x00','\x20','\x20','\x00','\x08','\x80','\x01','\x00','\x10','\x80',
'\x01','\x24','\x3F','\xFC','\x08','\x80','\x01','\x00','\x10','\x80',
'\xF9','\x24','\x40','\x00','\x08','\x84','\x02','\x80','\x50','\x80',
'\x21','\x24','\x9F','\xF0','\x10','\x88','\x04','\x40','\x50','\xFC',
'\x21','\xFC','\x00','\x00','\x10','\x90','\x08','\x20','\x7D','\x54',
'\x40','\x80','\x7F','\xF0','\x30','\xA0','\x30','\x18','\x52','\x54',
'\x78','\x80','\x00','\x10','\x30','\xC0','\xCF','\xE6','\x90','\x54',
'\x4B','\xFE','\x3F','\xD0','\x50','\x80','\x00','\x00','\x10','\x94',
'\xC8','\x90','\x03','\x10','\x91','\x80','\x00','\x00','\x1C','\x94',
'\x49','\x10','\x0C','\xD0','\x12','\x80','\x1F','\xF0','\xF1','\x24',
'\x49','\x52','\x70','\x30','\x14','\x80','\x10','\x10','\x52','\x24',
'\x4A','\x54','\x1F','\xD2','\x10','\x82','\x10','\x10','\x10','\x44',
'\x7A','\xA8','\x02','\x0A','\x10','\x82','\x10','\x10','\x10','\x44',
'\x4C','\x28','\x02','\x0A','\x10','\x82','\x10','\x10','\x10','\x84',
'\x08','\x44','\x7F','\xF6','\x10','\x7E','\x1F','\xF0','\x11','\x28',
'\x00','\x82','\x00','\x02','\x10','\x00','\x10','\x10','\x10','\x10'
};

xdata feijiawanzongtin_BMP {
'\x04','\x40','\x00','\x00','\x10','\x40','\x10','\x10','\x10','\x00',
'\x04','\x40','\x3F','\xF8','\x10','\x20','\x08','\x20','\x11','\xFC',
'\x04','\x40','\x21','\x08','\x13','\xFE','\x04','\x40','\x10','\x08',
'\xFC','\x7E','\x21','\x08','\x16','\x02','\x00','\x00','\x10','\x10',
'\x04','\x40','\x21','\x08','\x5C','\x04','\x1F','\xF0','\x54','\x30',
'\x04','\x40','\x3F','\xF8','\x51','\xF8','\x10','\x10','\x58','\x48',
'\x04','\x40','\x21','\x08','\x50','\x00','\x10','\x10','\x50','\x84',
'\x7C','\x7C','\x21','\x08','\x90','\x00','\x10','\x10','\x93','\x02',
'\x04','\x40','\x21','\x08','\x13','\xFE','\x1F','\xF0','\x10','\x00',
'\x04','\x40','\x3F','\xF8','\x10','\x90','\x10','\x10','\x11','\xFC',
'\x04','\x40','\x21','\x08','\x10','\x90','\x01','\x00','\x10','\x20',
'\x04','\x40','\x01','\x00','\x28','\x90','\x08','\x84','\x28','\x20',
'\xFC','\x7E','\x01','\x00','\x25','\x12','\x48','\x92','\x24','\x20',
'\x04','\x40','\x01','\x00','\x41','\x12','\x48','\x12','\x44','\x20',
'\x04','\x40','\x01','\x00','\x42','\x0E','\x87','\xF0','\x43','\xFE',
'\x04','\x40','\x01','\x00','\x84','\x00','\x00','\x00','\x80','\x00'
};

xdata bingtong_BMP {
'\x00','\x00','\x00','\x00',
'\xFF','\xFE','\xFE','\xFE',
'\x01','\x00','\x28','\x82',
'\x01','\x00','\x28','\x82',
'\x01','\x00','\xFE','\xBA',
'\x7F','\xFC','\xAA','\x82',
'\x41','\x04','\xAA','\x82',
'\x41','\x04','\xAA','\xBA',
'\x42','\x84','\xAE','\xAA',
'\x42','\x44','\xC2','\xAA',
'\x44','\x24','\x82','\xAA',
'\x48','\x24','\xFE','\xBA',
'\x40','\x04','\x82','\x82',
'\x40','\x04','\x82','\x82',
'\x40','\x14','\xFE','\x8A',
'\x40','\x08','\x82','\x84'
};

xdata WeiZhiVOCs_BMP {
'\x01','\x00','\x20','\x00','\x00','\x00','\x00','\x00',
'\x01','\x00','\x20','\x00','\x00','\x00','\x00','\x00',
'\x01','\x00','\x20','\x7C','\x00','\x00','\x00','\x00',
'\x3F','\xF8','\x7E','\x44','\xE7','\x38','\x3E','\x00',
'\x01','\x00','\x48','\x44','\x42','\x44','\x42','\x00',
'\x01','\x00','\x88','\x44','\x42','\x82','\x42','\x00',
'\x01','\x00','\x08','\x44','\x44','\x82','\x80','\x00',
'\xFF','\xFE','\x08','\x44','\x24','\x82','\x80','\x3E',
'\x03','\x80','\xFF','\x44','\x24','\x82','\x80','\x42',
'\x05','\x40','\x08','\x44','\x28','\x82','\x80','\x40',
'\x09','\x20','\x14','\x44','\x28','\x82','\x80','\x3C',
'\x11','\x10','\x14','\x44','\x18','\x82','\x42','\x02',
'\x21','\x08','\x22','\x7C','\x10','\x44','\x44','\x42',
'\xC1','\x06','\x22','\x44','\x10','\x38','\x38','\x7C',
'\x01','\x00','\x42','\x00','\x00','\x00','\x00','\x00',
'\x01','\x00','\x80','\x00','\x00','\x00','\x00','\x00'
};

xdata VOCs_BMP {
'\x00','\x00','\x00','\x00',
'\x00','\x00','\x00','\x00',
'\x00','\x00','\x00','\x00',
'\xE7','\x38','\x3E','\x00',
'\x42','\x44','\x42','\x00',
'\x42','\x82','\x42','\x00',
'\x44','\x82','\x80','\x00',
'\x24','\x82','\x80','\x3E',
'\x24','\x82','\x80','\x42',
'\x28','\x82','\x80','\x40',
'\x28','\x82','\x80','\x3C',
'\x18','\x82','\x42','\x02',
'\x10','\x44','\x44','\x42',
'\x10','\x38','\x38','\x7C',
'\x00','\x00','\x00','\x00',
'\x00','\x00','\x00','\x00'
};


#else

const char *const PolCode2017[] =
{
//以下是废水污染物参数，共计34个
    /*污水 B01**pH值 001**色度 002**悬浮物 003**五日生化需氧量 010*/
    "w00000", "w01001", "w01002", "w01012", "w01017",
    /*化学需氧量 011**总有机碳 015**总汞 020**烷基汞 021**总镉 022*/
    "w01018", "w01020", "w20111", "w20113", "w20115",
    /*总铬 023**六价铬 024**三价铬 025**总砷 026**总铅 027*/
    "w20116", "w20117", "025", "w20119", "w20120",
    /*总镍 028**总铜 029**总锌 030**总锰 031**总铁 032*/
    "w20121", "w20122", "w20123", "w20124", "w20125",
    /*总银 033**总铍 034**总硒 035**锡 036**硼 037*/
    "w20126", "w20127", "w20128", "w20092", "w20023",
    /*钼 038**钡 039**钴 040**氟化物 072**氨氮 060*/
    "w20061", "w20012", "w20038", "w21017", "w21003",
    /*有机氮 061**总氮 065**石油类 080**总磷 101*/
    "w99001", "w21001", "w22001", "w21011",
//以下是废气污染物参数，共计46个
    /*废气 B02**烟尘 01**二氧化硫 02**氮氧化物 03**一氧化碳 04*/
    "a00000", "a34013", "a21026", "a21002", "a21005",
    /*硫化氢 05**氟化物 06**氰化物 07**氯化氢 08**沥青烟 09*/
    "a21028", "a21018", "a21017", "a21024", "a34038",
    /*氨(氨气) 10**氯气 11**二硫化碳 12**硫醇 13**硫酸雾 14*/
    "a21001", "a21022", "a99051", "a30022", "a34039",
    /*铬酸雾 15**苯系物 16**甲苯 17**二甲苯 18**甲醛 19*/
    "a34040", "16", "a25003", "a25005", "a31001",
    /*苯并[a]芘 20**苯胺类 21**硝基苯 22**氯苯 23**光气 24*/
    "a25044", "a26001", "a25023", "a25010", "a99049",
    /*碳氢化合物 25**乙醛 26**酚类 27**甲醇 28**氯乙烯 29*/
    "a24087", "a31002", "a23001", "a30001", "a24046",
    /*二氧化碳 30**汞及其化合物 31**铅及其化合物 32**镉及其化合物 33**锡及其化合物 34*/
    "a05001", "a20057", "a20043", "a20025", "a20091",
    /*镍及其化合物 35**铍及其化合物 36**林格曼黑度 37**氧气含量 S01**烟气流速 S02*/
    "a20063", "a20016", "a01010", "a19001", "a01011",
    /*烟气温度 S03**烟气动压 S04**烟气湿度 S05**制冷温度 S06**烟道截面积 S07*/
    "a01012", "a01017", "a01014", "a01015", "a01016",
    "a01013", /*烟气压力 S08*/
//以下是扩展的客户自定义参数，共计20个
    "NO1", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

const char *const PolCode[] =
{
    //以下是废水污染物参数，共计34个
    "B01", "001", "002", "003", "010", "011", "015", "020", "021", "022",
    "023", "024", "025", "026", "027", "028", "029", "030", "031", "032",
    "033", "034", "035", "036", "037", "038", "039", "040", "041", "060",
    "061", "065", "080", "101",
//以下是废气污染物参数，共计46个
    "B02", "01", "02", "03", "04", "05", "06", "07", "08", "09",
    "10",  "11", "12", "13", "14", "15", "16", "17", "18", "19",
    "20",  "21", "22", "23", "24", "25", "26", "27", "28", "29",
    "30",  "31", "32", "33", "34", "35", "36", "37", "S01", "S02",
    "S03", "S04", "S05", "S06", "S07", "S08",
//以下是扩展的客户自定义参数，共计20个
    "NO1", "NO2", "NO3", "NO4", "NO5", "NO6", "NO7", "NO8", "NO9", "NO10",
    "NO11", "NO12", "NO13", "NO14", "NO15", "NO16", "NO17", "NO18", "NO19", "NO20",
};

#define glDispCustom_00(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_01(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_02(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_03(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_04(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_05(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_06(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_07(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_08(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_09(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_10(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_11(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_12(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_13(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_14(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_15(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_16(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_17(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_18(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}
#define glDispCustom_19(x, y)	{glXPutBitmap (x, y, 16*1, 16, Kong_BMP);}

#endif
#define END_____________________________________


///*** Beginheader getPolCode */
//char* getPolCode(char index);
///*** endheader */
//char* getPolCode(char index)
//{
//   char *p;
//
//   if (index >= BOCON_NO_OF_POL / 2) return NULL;
//   if (index < (BOCON_NO_OF_POL / 2 - EXTEND_POLCODE_COUNTER))
//   {
//      p = PolCode[index];
//   }
//   else
//   {
//      p = sysParam.pol[index - (BOCON_NO_OF_POL / 2 - EXTEND_POLCODE_COUNTER)].code;
//   }
//   return p;
//}


/*** Endheader */


/*******************************************************************************
以下是非国标的污染物参数名称的显示数据
*******************************************************************************/

#define _1 //累积流量
/*** BeginHeader leijiliul_bmp */
extern unsigned long leijiliul_bmp;
/*** EndHeader */
xdata leijiliul_bmp {
	'\xFF', '\xE0', '\x81', '\x00', '\x81', '\x00', '\x7F', '\xC3',
	'\x84', '\x20', '\x41', '\x00', '\x5F', '\xF8', '\x40', '\x43',
	'\xFF', '\xE0', '\x41', '\x00', '\x42', '\x00', '\x7F', '\xC3',
	'\x84', '\x20', '\x01', '\x02', '\x04', '\x40', '\x40', '\x43',
	'\xFF', '\xE0', '\x01', '\x01', '\x08', '\x23', '\xFF', '\xFB',
	'\x08', '\x03', '\xDF', '\xF9', '\x1F', '\xF0', '\x00', '\x03',
	'\x10', '\x80', '\x41', '\x00', '\x40', '\x10', '\x7F', '\xC3',
	'\x7F', '\x00', '\x41', '\x00', '\x40', '\x00', '\x44', '\x43',
	'\x06', '\x00', '\x41', '\x00', '\x89', '\x20', '\x7F', '\xC3',
	'\x18', '\x40', '\x41', '\x03', '\x89', '\x20', '\x44', '\x43',
	'\xFF', '\xE0', '\x41', '\x00', '\x89', '\x20', '\x7F', '\xC3',
	'\x04', '\x20', '\x51', '\x00', '\x89', '\x20', '\x04', '\x03',
	'\x44', '\x80', '\x61', '\x00', '\x89', '\x28', '\x7F', '\xC3',
	'\x94', '\x40', '\x41', '\x00', '\x91', '\x28', '\x04', '\x03',
	'\x08', '\x20', '\x01', '\x00', '\x21', '\x19', '\xFF', '\xF3',
	'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x03'
};

#define _02//速度场系数
/*** BeginHeader suduxishu_bmp */
extern unsigned long suduxishu_bmp;
/*** EndHeader */
xdata suduxishu_bmp {
	'\x20', '\x40', '\x00', '\x80', '\x23', '\xF0', '\x3F', '\x00', '\x49', '\x21',
	'\x17', '\xFC', '\x3F', '\xFE', '\x20', '\x20', '\x04', '\x00', '\x2A', '\x21',
	'\x10', '\x40', '\x22', '\x20', '\x20', '\x40', '\x08', '\x20', '\x08', '\x3F',
	'\x03', '\xF8', '\x22', '\x20', '\x20', '\x80', '\x10', '\x40', '\xFF', '\x45',
	'\x02', '\x48', '\x3F', '\xFC', '\xF9', '\x00', '\x3F', '\x80', '\x2A', '\x45',
	'\xF2', '\x48', '\x22', '\x20', '\x23', '\xFC', '\x01', '\x00', '\x49', '\x45',
	'\x13', '\xF8', '\x22', '\x20', '\x21', '\x24', '\x06', '\x10', '\x88', '\xA5',
	'\x10', '\xE0', '\x23', '\xE0', '\x21', '\x24', '\x18', '\x08', '\x10', '\x29',
	'\x11', '\x50', '\x20', '\x00', '\x21', '\x24', '\x7F', '\xFC', '\xFE', '\x29',
	'\x12', '\x48', '\x2F', '\xF0', '\x22', '\x24', '\x01', '\x04', '\x22', '\x11',
	'\x14', '\x44', '\x24', '\x10', '\x3A', '\x44', '\x09', '\x20', '\x42', '\x11',
	'\x10', '\x40', '\x42', '\x20', '\xE4', '\x44', '\x11', '\x10', '\x64', '\x29',
	'\x28', '\x00', '\x41', '\xC0', '\x48', '\x84', '\x21', '\x08', '\x18', '\x29',
	'\x47', '\xFE', '\x86', '\x30', '\x01', '\x28', '\x45', '\x04', '\x34', '\x45',
	'\x00', '\x00', '\x38', '\x0E', '\x02', '\x10', '\x02', '\x00', '\xC2', '\x83',
	'\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x01'
};

#define _03//空
/*** BeginHeader Kong_BMP */
extern unsigned long Kong_BMP;
/*** EndHeader */
xdata Kong_BMP {
	'\x02', '\x00',
	'\x01', '\x00',
	'\x7F', '\xFE',
	'\x40', '\x02',
	'\x88', '\x24',
	'\x10', '\x10',
	'\x20', '\x08',
	'\x00', '\x00',
	'\x1F', '\xF0',
	'\x01', '\x00',
	'\x01', '\x00',
	'\x01', '\x00',
	'\x01', '\x00',
	'\x01', '\x00',
	'\x7F', '\xFC',
	'\x00', '\x00'
};
/*** BeginHeader ZhongShanZhiGu_BMP */
extern unsigned long ZhongShanZhiGu_BMP; //广东智谷动力环境科技有限公司
/*** EndHeader */
xdata ZhongShanZhiGu_BMP  {
	'\x02', '\x00', '\x10', '\x04', '\x00', '\x02', '\x20', '\x00', '\x80', '\x10', '\x00', '\x00', '\x08', '\x20', '\x00', '\x20',
	'\x82', '\x00', '\x40', '\x00', '\x00', '\x01', '\x01', '\xFF', '\xCF',
	'\x01', '\x00', '\x10', '\x07', '\xDF', '\x04', '\x10', '\x78', '\x80', '\x10', '\x00', '\x7F', '\x89', '\xFC', '\x0D', '\x20',
	'\x82', '\x00', '\x40', '\x1E', '\xFC', '\x09', '\x00', '\x00', '\x4F',
	'\x3F', '\xF9', '\xFF', '\xC9', '\x11', '\x08', '\x88', '\x00', '\x80', '\x10', '\x0F', '\x84', '\x08', '\x88', '\x70', '\xA0',
	'\x82', '\x0F', '\xFF', '\x92', '\x84', '\x08', '\x80', '\x00', '\x4F',
	'\x20', '\x00', '\x20', '\x01', '\x11', '\x10', '\x84', '\x03', '\xF8', '\x10', '\x02', '\x04', '\x08', '\x50', '\x10', '\xA3',
	'\xDF', '\xC0', '\x80', '\x12', '\x84', '\x10', '\x83', '\xFF', '\x4F',
	'\x20', '\x00', '\x48', '\x0F', '\xF1', '\x01', '\x40', '\x00', '\x8B', '\xFF', '\xC2', '\x08', '\x3D', '\xFE', '\x12', '\x20',
	'\x82', '\x01', '\xFE', '\x14', '\xFC', '\x10', '\x40', '\x00', '\x4F',
	'\x20', '\x00', '\x88', '\x02', '\x91', '\x02', '\x20', '\xFC', '\x88', '\x10', '\x42', '\x08', '\x08', '\x00', '\xFD', '\x20',
	'\x82', '\x03', '\x02', '\x14', '\x84', '\x20', '\x20', '\x00', '\x4F',
	'\x20', '\x00', '\xFF', '\x84', '\x5F', '\x04', '\x10', '\x20', '\x88', '\x20', '\x4F', '\x9A', '\x09', '\xFC', '\x11', '\x20',
	'\x9F', '\x85', '\x02', '\x12', '\x84', '\x44', '\x11', '\xFE', '\x4F',
	'\x20', '\x00', '\x08', '\x08', '\x00', '\x08', '\x08', '\x20', '\x88', '\x20', '\x42', '\x29', '\x09', '\x04', '\x30', '\x38',
	'\xC8', '\x89', '\xFE', '\x12', '\xFC', '\x84', '\x09', '\x02', '\x4F',
	'\x20', '\x00', '\x08', '\x03', '\xFE', '\x37', '\xF6', '\x48', '\x88', '\x20', '\x42', '\x48', '\x89', '\xFC', '\x3B', '\xE3',
	'\x88', '\x81', '\x02', '\x12', '\x92', '\x08', '\x01', '\x02', '\x4F',
	'\x20', '\x00', '\x89', '\x02', '\x02', '\x04', '\x10', '\x44', '\x88', '\x40', '\x42', '\x08', '\x89', '\x04', '\x54', '\x20',
	'\x85', '\x01', '\x02', '\x12', '\x94', '\x09', '\x01', '\x02', '\x4F',
	'\x20', '\x00', '\x88', '\x83', '\xFE', '\x04', '\x10', '\xFD', '\x08', '\x40', '\x43', '\x88', '\x0D', '\xFC', '\x90', '\x20',
	'\x82', '\x01', '\xFE', '\x1C', '\x88', '\x10', '\x81', '\xFE', '\x4F',
	'\x40', '\x01', '\x08', '\x42', '\x02', '\x04', '\x10', '\x05', '\x08', '\x80', '\x4E', '\x08', '\x30', '\x50', '\x10', '\x20',
	'\x85', '\x01', '\x02', '\x10', '\xA8', '\x20', '\x41', '\x00', '\x4F',
	'\x40', '\x02', '\x08', '\x43', '\xFE', '\x07', '\xF0', '\x02', '\x09', '\x00', '\x80', '\x08', '\x00', '\x92', '\x10', '\x20',
	'\x88', '\x81', '\x02', '\x10', '\xC4', '\x7F', '\xE0', '\x00', '\x4F',
	'\x80', '\x00', '\x38', '\x02', '\x02', '\x04', '\x10', '\x04', '\x32', '\x03', '\x00', '\x08', '\x03', '\x0E', '\x10', '\x23',
	'\xB0', '\x61', '\x0E', '\x10', '\x82', '\x00', '\x20', '\x01', '\xCF'
};

/*** BeginHeader */
#endif
/*** EndHeader */
